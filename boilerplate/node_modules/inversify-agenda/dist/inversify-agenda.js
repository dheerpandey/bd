"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Agenda = require("agenda");
const inversify_1 = require("inversify");
class InversifyAgendaTasksConfiguration {
    constructor() {
        this.tasks = [];
        this.intervals = {};
    }
    decorateAndRegister(target, key, ...intervals) {
        inversify_1.decorate(inversify_1.injectable(), target);
        this.tasks.push({ key, target });
        intervals.forEach(interval => {
            if (typeof interval === 'string' || typeof interval === 'number') {
                this.intervals[interval] = this.intervals[interval] || [];
                this.intervals[interval].push({ key });
            }
            else {
                this.intervals[interval.interval] = this.intervals[interval.interval] || [];
                this.intervals[interval.interval].push({
                    data: interval.data,
                    key
                });
            }
        });
    }
}
exports.InversifyAgendaTasksConfiguration = InversifyAgendaTasksConfiguration;
exports.inversifyAgendaTasksConfiguration = new InversifyAgendaTasksConfiguration();
function task(key, ...int) {
    return (target) => {
        exports.inversifyAgendaTasksConfiguration.decorateAndRegister(target, key, ...int);
    };
}
exports.task = task;
class InversifyAgenda {
    constructor(container, config) {
        this.container = container;
        this.config = config;
        this.errorHandlers = [];
        if (this.config.agenda && this.config.db) {
            throw new Error('Cannot use agenda instance and db configuration at the same time');
        }
        if (!this.config.agenda && !this.config.db) {
            throw new Error('Yu have to configure agenda or db connection');
        }
        if (this.config.db) {
            this.config.agenda = new Agenda({
                db: {
                    address: this.config.db.address,
                    collection: this.config.db.collection,
                    options: this.config.db.options
                }
            });
        }
    }
    onError(hanlder) {
        this.errorHandlers.push(hanlder);
        return this;
    }
    build() {
        exports.inversifyAgendaTasksConfiguration.tasks.forEach(task => {
            this.container.bind(task.target).toSelf();
            this.defineTaskService(this.container, this.config.agenda, task.key, task.target);
        });
        this.config.agenda.on('ready', () => Object.keys(exports.inversifyAgendaTasksConfiguration.intervals)
            .forEach(interval => exports.inversifyAgendaTasksConfiguration.intervals[interval]
            .forEach(d => this.config.agenda.every(interval, d.key, d.data))));
        return this.config.agenda;
    }
    defineTaskService(container, agenda, key, target) {
        agenda.define(key, (job, done) => __awaiter(this, void 0, void 0, function* () {
            try {
                yield container.get(target).execute(job);
                done();
            }
            catch (err) {
                done(err);
                this.errorHandlers.forEach(handler => handler(err));
            }
        }));
    }
}
exports.InversifyAgenda = InversifyAgenda;
