import * as Agenda from 'agenda';
import { Container } from 'inversify';
export interface AgendaTaskConfig {
    key: string;
    target: any;
}
export interface AgendaTaskInterval<T> {
    interval: number | string;
    data: T;
}
export interface AgendaTaskCommand {
    execute(job: Agenda.Job<Agenda.JobAttributesData>): Promise<void>;
}
export declare class InversifyAgendaTasksConfiguration {
    tasks: AgendaTaskConfig[];
    intervals: {
        [key: string]: {
            key: string;
            data?: any;
        }[];
    };
    decorateAndRegister(target: any, key: string, ...intervals: (number | string | AgendaTaskInterval<any>)[]): void;
}
export declare const inversifyAgendaTasksConfiguration: InversifyAgendaTasksConfiguration;
export declare function task(key: string, ...int: (number | string | AgendaTaskInterval<any>)[]): (target: any) => void;
export declare class InversifyAgenda {
    private container;
    private config;
    errorHandlers: ((err: Error) => void)[];
    constructor(container: Container, config: {
        agenda?: Agenda;
        db?: {
            address: string;
            collection?: string;
            options?: any;
        };
    });
    onError(hanlder: (err: Error) => void): this;
    build(): Agenda;
    defineTaskService(container: Container, agenda: Agenda, key: string, target: symbol): void;
}
