"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const util_1 = require("util");
const logSettings_1 = require("../logSettings");
const constants_1 = require("./constants");
const data_1 = require("./data");
const errors_1 = require("./errors");
const utils_1 = require("./utils");
/**
 * Private schema builder out of class props
 * -> If you discover this, dont use this function, use Typegoose.buildSchema!
 * @param cl The not initialized Class
 * @param sch Already Existing Schema?
 * @param opt Options to override
 * @returns Returns the Build Schema
 * @private
 */
function _buildSchema(cl, sch, opt) {
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    // Options sanity check
    opt = utils_1.mergeSchemaOptions(util_1.isNullOrUndefined(opt) || typeof opt !== 'object' ? {} : opt, cl);
    const name = utils_1.getName(cl);
    logSettings_1.logger.debug('_buildSchema Called for %s with options:', name, opt);
    /** Simplify the usage */
    const Schema = mongoose.Schema;
    const { schemaOptions: ropt } = Reflect.getMetadata(constants_1.DecoratorKeys.ModelOptions, cl) || {};
    const schemaOptions = Object.assign(ropt || {}, opt);
    const { '1': { decorators } } = [...data_1.decoratorCache.entries()].find((v) => v[1].class === cl) ||
        { 1: { decorators: null } };
    if (!util_1.isNullOrUndefined(decorators)) {
        for (const decorator of decorators.values()) {
            decorator();
        }
    }
    if (!data_1.schemas.get(name)) {
        data_1.schemas.set(name, {});
    }
    if (!(sch instanceof Schema)) {
        sch = new Schema(data_1.schemas.get(name), schemaOptions);
    }
    else {
        sch = sch.clone();
        sch.add(data_1.schemas.get(name));
    }
    sch.loadClass(cl);
    const hook = data_1.hooks.get(name);
    if (hook) {
        hook.pre.forEach((obj) => {
            sch.pre(obj.method, obj.func);
            // ^ look at https://github.com/DefinitelyTyped/DefinitelyTyped/issues/37333
        });
        hook.post.forEach((obj) => sch.post(obj.method, obj.func));
    }
    if (data_1.plugins.get(name)) {
        for (const plugin of data_1.plugins.get(name)) {
            logSettings_1.logger.debug('Applying Plugin:', plugin);
            sch.plugin(plugin.mongoosePlugin, plugin.options);
        }
    }
    /** Simplify the usage */
    const virtualPopulates = data_1.virtuals.get(name);
    if (virtualPopulates) {
        for (const [key, options] of virtualPopulates) {
            logSettings_1.logger.debug('Applying Virtual Populates:', key, options);
            sch.virtual(key, options);
        }
    }
    /** Get Metadata for indices */
    const indices = Reflect.getMetadata(constants_1.DecoratorKeys.Index, cl) || [];
    for (const index of indices) {
        logSettings_1.logger.debug('Applying Index:', index);
        sch.index(index.fields, index.options);
    }
    return sch;
}
exports._buildSchema = _buildSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZW1hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2ludGVybmFsL3NjaGVtYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFxQztBQUVyQywrQkFBeUM7QUFDekMsZ0RBQXdDO0FBRXhDLDJDQUE0QztBQUM1QyxpQ0FBMkU7QUFDM0UscUNBQXdDO0FBQ3hDLG1DQUFzRDtBQUV0RDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLFlBQVksQ0FDMUIsRUFBSyxFQUNMLEdBQXFCLEVBQ3JCLEdBQTRCO0lBRTVCLElBQUksT0FBTyxFQUFFLEtBQUssVUFBVSxFQUFFO1FBQzVCLE1BQU0sSUFBSSxxQkFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzVCO0lBRUQsdUJBQXVCO0lBQ3ZCLEdBQUcsR0FBRywwQkFBa0IsQ0FBQyx3QkFBaUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTNGLE1BQU0sSUFBSSxHQUFHLGVBQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV6QixvQkFBTSxDQUFDLEtBQUssQ0FBQywwQ0FBMEMsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFFcEUseUJBQXlCO0lBQ3pCLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7SUFDL0IsTUFBTSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsR0FBa0IsT0FBTyxDQUFDLFdBQVcsQ0FBQyx5QkFBYSxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekcsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBRXJELE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxH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