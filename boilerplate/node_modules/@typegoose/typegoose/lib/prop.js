"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose = require("mongoose");
const util_1 = require("util");
const constants_1 = require("./internal/constants");
const data_1 = require("./internal/data");
const errors_1 = require("./internal/errors");
const utils = require("./internal/utils");
const logSettings_1 = require("./logSettings");
const typegoose_1 = require("./typegoose");
/** This Enum is meant for baseProp to decide for diffrent props (like if it is an arrayProp or prop or mapProp) */
var WhatIsIt;
(function (WhatIsIt) {
    WhatIsIt[WhatIsIt["ARRAY"] = 0] = "ARRAY";
    WhatIsIt[WhatIsIt["MAP"] = 1] = "MAP";
    WhatIsIt[WhatIsIt["NONE"] = 2] = "NONE";
})(WhatIsIt || (WhatIsIt = {}));
/**
 * Base Function for prop & arrayProp
 * @param origOptions The options (like require)
 * @param Type What Type it is
 * @param target Target Class
 * @param key Value Key of target class
 * @param isArray is it an array?
 */
function baseProp(origOptions, Type, target, key, whatis = WhatIsIt.NONE) {
    if (Type === target) {
        throw new Error('It seems like the type used is the same as the target class, which is currently not supported\n'
            + `Please look at https://github.com/typegoose/typegoose/issues/42 for more infomation, for now please avoid using it!`);
    }
    const initname = utils.createUniqueID(target);
    data_1.decoratorCache.get(initname).decorators.set(key, () => {
        const rawOptions = Object.assign({}, origOptions);
        if (utils.isNotDefined(Type)) {
            if (Type !== target) { // prevent "infinite" buildSchema loop / Maximum Class size exceeded
                typegoose_1.buildSchema(Type, { _id: typeof rawOptions._id === 'boolean' ? rawOptions._id : true });
            }
        }
        const name = utils.getName(target.constructor);
        if (!data_1.virtuals.get(name)) {
            data_1.virtuals.set(name, new Map());
        }
        if (utils.isWithVirtualPOP(rawOptions)) {
            if (!utils.includesAllVirtualPOP(rawOptions)) {
                throw new errors_1.NotAllVPOPElementsError(name, key);
            }
            data_1.virtuals.get(name).set(key, rawOptions);
            return;
        }
        if (whatis === WhatIsIt.ARRAY) {
            utils.initAsArray(name, key);
        }
        else {
            utils.initAsObject(name, key);
        }
        if (!util_1.isNullOrUndefined(rawOptions.set) || !util_1.isNullOrUndefined(rawOptions.get)) {
            if (typeof rawOptions.set !== 'function') {
                throw new TypeError(`"${name}.${key}" does not have a set function!`);
            }
            if (typeof rawOptions.get !== 'function') {
                throw new TypeError(`"${name}.${key}" does not have a get function!`);
            }
            const newType = rawOptions && rawOptions.type ? rawOptions.type : Type;
            if (rawOptions && rawOptions.type) {
                delete rawOptions.type;
            }
            /*
             * Note:
             * this dosnt have a check if prop & returntype of the function is the same,
             * because it cant be accessed at runtime
             */
            data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: newType }), rawOptions);
            return;
        }
        const ref = rawOptions.ref;
        const refType = rawOptions.refType || mongoose.Schema.Types.ObjectId;
        if (ref) {
            if (whatis === WhatIsIt.ARRAY) {
                logSettings_1.logger.warn('"ref" is used in an arrayProp, which should not be used! (%s, %s)\n'
                    + 'Use "itemsRef"', utils.getName(target), key);
            }
            delete rawOptions.ref;
            const refName = typeof ref === 'string' ? ref : utils.getName(ref);
            data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: refType, ref: refName }), rawOptions);
            return;
        }
        const itemsRef = rawOptions.itemsRef;
        const itemsRefType = rawOptions.itemsRefType || mongoose.Schema.Types.ObjectId;
        if (itemsRef) {
            const itemsRefName = typeof itemsRef === 'string' ? itemsRef : utils.getName(itemsRef);
            delete rawOptions.itemsRef;
            data_1.schemas.get(name)[key][0] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), { type: itemsRefType, ref: itemsRefName }), rawOptions);
            return;
        }
        const refPath = rawOptions.refPath;
        if (refPath && typeof refPath === 'string') {
            if (whatis === WhatIsIt.ARRAY) {
                logSettings_1.logger.warn('"refPath" is used in an arrayProp, which should not be used! (%s, %s)\n'
                    + 'Use "itemsRefPath"', utils.getName(target), key);
            }
            delete rawOptions.refPath;
            data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: refType, refPath }), rawOptions);
            return;
        }
        const itemsRefPath = rawOptions.itemsRefPath;
        if (itemsRefPath && typeof itemsRefPath === 'string') {
            delete rawOptions.itemsRefPath;
            data_1.schemas.get(name)[key][0] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), { type: itemsRefType, refPath: itemsRefPath }), rawOptions);
            return;
        }
        const enumOption = rawOptions.enum;
        if (enumOption) {
            if (!Array.isArray(enumOption)) {
                rawOptions.enum = Object.keys(enumOption).map((propKey) => enumOption[propKey]);
            }
        }
        const selectOption = rawOptions.select;
        if (typeof selectOption === 'boolean') {
            data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { select: selectOption });
        }
        // check if Type is actually a real working Type
        if (util_1.isNullOrUndefined(Type) || typeof Type !== 'function') {
            throw new errors_1.InvalidTypeError(target.constructor.name, key, Type);
        }
        // check for validation inconsistencies
        if (utils.isWithStringValidate(rawOptions) && !utils.isString(Type)) {
            throw new errors_1.NotStringTypeError(key);
        }
        // check for transform inconsistencies
        if (utils.isWithStringTransform(rawOptions) && !utils.isString(Type)) {
            throw new errors_1.NotStringTypeError(key);
        }
        if (utils.isWithNumberValidate(rawOptions) && !utils.isNumber(Type)) {
            throw new errors_1.NotNumberTypeError(key);
        }
        const subSchema = data_1.schemas.get(utils.getName(Type));
        if (!subSchema && !utils.isPrimitive(Type) && !utils.isObject(Type)) {
            throw new errors_1.InvalidPropError(Type.name, key); // This seems to be never thrown!
        }
        const { ['items']: items } = rawOptions, options = __rest(rawOptions, ['items']);
        if (utils.isPrimitive(Type)) {
            switch (whatis) {
                case WhatIsIt.ARRAY:
                    data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), options), { type: [Type] });
                    return;
                case WhatIsIt.MAP:
                    // "default" is a reserved keyword, thats why "_default" is used
                    const { default: _default } = options;
                    delete options.default;
                    delete options.of;
                    data_1.schemas.get(name)[key] = Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: Map, default: _default, of: Object.assign({ type: Type }, options) });
                    return;
                case WhatIsIt.NONE:
                    data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), options), { type: Type });
                    return;
                default:
                    throw new Error(`"${whatis}"(whatis(primitive)) is invalid for "${name}.${key}"`);
            }
        }
        // If the 'Type' is not a 'Primitive Type' and no subschema was found treat the type as 'Object'
        // so that mongoose can store it as nested document
        if (utils.isObject(Type) && !subSchema) {
            data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), options), { type: Object // i think this could take some improvements
             });
            return;
        }
        switch (whatis) {
            case WhatIsIt.ARRAY:
                const virtualSchemaArrayItem = typegoose_1.buildSchema(Type, {
                    _id: typeof rawOptions._id === 'boolean' ? rawOptions._id : true
                });
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key][0]), options), { type: [virtualSchemaArrayItem] });
                return;
            case WhatIsIt.MAP:
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), { type: Map }), options);
                data_1.schemas.get(name)[key].of = Object.assign(Object.assign({}, data_1.schemas.get(name)[key].of), subSchema);
                return;
            case WhatIsIt.NONE:
                const virtualSchema = typegoose_1.buildSchema(Type, {
                    _id: typeof rawOptions._id === 'boolean' ? rawOptions._id : true
                });
                data_1.schemas.get(name)[key] = Object.assign(Object.assign(Object.assign({}, data_1.schemas.get(name)[key]), options), { type: virtualSchema });
                return;
            default:
                throw new Error(`"${whatis}"(whatis(subSchema)) is invalid for "${name}.${key}"`);
        }
    });
}
/**
 * Set Property Options for the property below
 * @param options Options
 * @public
 */
function prop(options = {}) {
    return (target, key) => {
        const Type = Reflect.getMetadata(constants_1.DecoratorKeys.Prop, target, key);
        if (!Type) {
            throw new errors_1.NoMetadataError(key);
        }
        // soft errors
        {
            if ('items' in options) {
                logSettings_1.logger.warn(new Error('You might not want to use option "items" in a @prop'));
            }
            if ('of' in options) {
                logSettings_1.logger.warn(new Error('You might not want to use option "of" in a @prop'));
            }
        }
        baseProp(options, Type, target, key, WhatIsIt.NONE);
    };
}
exports.prop = prop;
/**
 * Set Property(that are Maps) Options for the property below
 * @param options Options for the Map
 * @public
 */
function mapProp(options) {
    return (target, key) => {
        const Type = options.of;
        if ('items' in options) {
            logSettings_1.logger.warn(new Error('You might not want to use option "items" in a @mapProp'));
        }
        baseProp(options, Type, target, key, WhatIsIt.MAP);
    };
}
exports.mapProp = mapProp;
/**
 * Set Property(that are Arrays) Options for the property below
 * @param options Options
 * @public
 */
function arrayProp(options) {
    return (target, key) => {
        const Type = options.items;
        if ('of' in options) {
            logSettings_1.logger.warn(new Error('You might not want to use option "of" in a @arrayProp'));
        }
        baseProp(options, Type, target, key, WhatIsIt.ARRAY);
    };
}
exports.arrayProp = arrayProp;
//# sourceMappingURL=data:application/json;base64,