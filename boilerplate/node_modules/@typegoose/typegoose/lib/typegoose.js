"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
/* imports */
const mongoose = require("mongoose");
exports.mongoose = mongoose;
require("reflect-metadata");
const util_1 = require("util");
const defaultClasses = require("./defaultClasses");
exports.defaultClasses = defaultClasses;
const constants_1 = require("./internal/constants");
const data_1 = require("./internal/data");
const errors_1 = require("./internal/errors");
const schema_1 = require("./internal/schema");
const utils_1 = require("./internal/utils");
var logSettings_1 = require("./logSettings");
exports.setLogLevel = logSettings_1.setLogLevel;
exports.LogLevels = logSettings_1.LogLevels;
__export(require("./method"));
__export(require("./prop"));
__export(require("./hooks"));
__export(require("./plugin"));
__export(require("."));
__export(require("./typeguards"));
__export(require("./optionsProp"));
var utils_2 = require("./internal/utils");
exports.getClassForDocument = utils_2.getClassForDocument;
/** @deprecated */
class Typegoose {
    /* istanbul ignore next */
    constructor() {
        // tslint:disable-next-line:no-empty
        util_1.deprecate(() => { }, 'Typegoose Class is Deprecated!')();
    }
    /* istanbul ignore next */
    /** @deprecated */
    getModelForClass(cl, settings) {
        utils_1.assignMetadata(constants_1.DecoratorKeys.ModelOptions, settings, cl);
        return util_1.deprecate(getModelForClass, 'Typegoose Class is Deprecated!')(cl);
    }
    /* istanbul ignore next */
    /** @deprecated */
    setModelForClass(cl, settings) {
        utils_1.assignMetadata(constants_1.DecoratorKeys.ModelOptions, settings, cl);
        return util_1.deprecate(setModelForClass, 'Typegoose Class is Deprecated!')(cl);
    }
    /* istanbul ignore next */
    /** @deprecated */
    buildSchema(cl) {
        return util_1.deprecate(buildSchema, 'Typegoose Class is Deprecated!')(cl);
    }
}
exports.Typegoose = Typegoose;
/**
 * Get a Model for a Class
 * Executes .setModelForClass if it cant find it already
 * @param cl The uninitialized Class
 * @returns The Model
 * @public
 * @example
 * ```ts
 * class Name {}
 *
 * const NameModel = getModelForClass(Name);
 * ```
 */
function getModelForClass(cl, options) {
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    const roptions = utils_1.mergeMetadata(constants_1.DecoratorKeys.ModelOptions, options || {}, cl);
    const name = utils_1.getName(cl);
    if (data_1.models.get(name)) {
        return data_1.models.get(name);
    }
    let model = mongoose.model.bind(mongoose);
    if (!util_1.isNullOrUndefined(roptions.existingConnection)) {
        model = roptions.existingConnection.model.bind(roptions.existingConnection);
    }
    else if (!util_1.isNullOrUndefined(roptions.existingMongoose)) {
        model = roptions.existingMongoose.model.bind(roptions.existingMongoose);
    }
    return addModelToTypegoose(model(name, buildSchema(cl, roptions.schemaOptions)), cl);
}
exports.getModelForClass = getModelForClass;
/* istanbul ignore next */
/**
 * Builds the Schema & The Model
 * DEPRECTAED: use getModelForClass
 * @param cl The uninitialized Class
 * @returns The Model
 * @deprecated
 */
function setModelForClass(cl) {
    return util_1.deprecate(getModelForClass(cl), 'setModelForClass is deprecated, please use getModelForClasse (see README#Migrate to 6.0.0)');
}
exports.setModelForClass = setModelForClass;
/**
 * Generates a Mongoose schema out of class props, iterating through all parents
 * @param cl The not initialized Class
 * @returns Returns the Build Schema
 */
function buildSchema(cl, options) {
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    const mergedOptions = utils_1.mergeSchemaOptions(options, cl);
    let sch;
    /** Parent Constructor */
    let parentCtor = Object.getPrototypeOf(cl.prototype).constructor;
    // iterate trough all parents
    while (parentCtor && parentCtor.name !== 'Object') {
        /* istanbul ignore next */
        if (parentCtor.name === 'Typegoose') { // TODO: remove this "if", if the Typegoose class gets removed [DEPRECATION]
            util_1.deprecate(() => undefined, 'The Typegoose Class is deprecated, please try to remove it')();
            break;
        }
        // extend schema
        sch = schema_1._buildSchema(parentCtor, sch, mergedOptions);
        // set next parent
        parentCtor = Object.getPrototypeOf(parentCtor.prototype).constructor;
    }
    // get schema of current model
    sch = schema_1._buildSchema(cl, sch, mergedOptions);
    return sch;
}
exports.buildSchema = buildSchema;
/**
 * This can be used to add custom Models to Typegoose, with the type infomation of cl
 * Note: no gurantee that the type infomation is fully correct
 * @param model The model to store
 * @param cl The Class to store
 * @example
 * ```ts
 * class T {}
 *
 * const schema = buildSchema(T);
 * // modifications to the schame can be done
 * const model = addModelToTypegoose(mongoose.model(schema), T);
 * ```
 */
function addModelToTypegoose(model, cl) {
    if (!(model.prototype instanceof mongoose.Model)) {
        throw new TypeError(`"${model}" is not a valid Model!`);
    }
    if (typeof cl !== 'function') {
        throw new errors_1.NoValidClass(cl);
    }
    const name = utils_1.getName(cl);
    if (data_1.constructors.get(name)) {
        // tslint:disable-next-line:no-console
        console.error(new Error('It seems like "addModelToTypegoose" got called twice\n'
            + 'Or multiple classes with the same name are used, which currently isnt supported!'
            + `"Erroring" class is ${name}`));
    }
    data_1.models.set(name, model);
    data_1.constructors.set(name, cl);
    return data_1.models.get(name);
}
exports.addModelToTypegoose = addModelToTypegoose;
/**
 * Build a Model from a given class and return the model
 * @param from The Model to build From
 * @param cl The Class to make a model out
 * @param id The Identifier to use to differentiate documents (default: cl.name)
 * @example
 * ```ts
 * class C1 {}
 * class C2 extends C1 {}
 *
 * const C1Model = getModelForClass(C1);
 * const C2Model = getDiscriminatorModelForClass(C1Model, C1);
 * ```
 */
function getDiscriminatorModelForClass(from, cl, id) {
    const name = utils_1.getName(cl);
    if (data_1.models.get(name)) {
        return data_1.models.get(name);
    }
    const sch = buildSchema(cl);
    const discriminatorKey = sch.get('discriminatorKey');
    if (sch.path(discriminatorKey)) {
        sch.paths[discriminatorKey].options.$skipDiscriminatorCheck = true;
    }
    const model = from.discriminator(name, sch, id ? id : name);
    return addModelToTypegoose(model, cl);
}
exports.getDiscriminatorModelForClass = getDiscriminatorModelForClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWdvb3NlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R5cGVnb29zZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGFBQWE7QUFDYixxQ0FBcUM7QUFhNUIsNEJBQVE7QUFaakIsNEJBQTBCO0FBQzFCLCtCQUFvRDtBQUVwRCxtREFBbUQ7QUFrQjFDLHdDQUFjO0FBakJ2QixvREFBcUQ7QUFDckQsMENBQXVEO0FBQ3ZELDhDQUFpRDtBQUNqRCw4Q0FBaUQ7QUFDakQsNENBQThGO0FBSzlGLDZDQUF1RDtBQUE5QyxvQ0FBQSxXQUFXLENBQUE7QUFBRSxrQ0FBQSxTQUFTLENBQUE7QUFDL0IsOEJBQXlCO0FBQ3pCLDRCQUF1QjtBQUN2Qiw2QkFBd0I7QUFDeEIsOEJBQXlCO0FBQ3pCLHVCQUFrQjtBQUNsQixrQ0FBNkI7QUFDN0IsbUNBQThCO0FBRzlCLDBDQUF1RDtBQUE5QyxzQ0FBQSxtQkFBbUIsQ0FBQTtBQUU1QixrQkFBa0I7QUFDbEIsTUFBc0IsU0FBUztJQUM3QiwwQkFBMEI7SUFDMUI7UUFDRSxvQ0FBb0M7UUFDcEMsZ0JBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsZ0NBQWdDLENBQUMsRUFBRSxDQUFDO0lBQzNELENBQUM7SUFFRCwwQkFBMEI7SUFDMUIsa0JBQWtCO0lBQ1gsZ0JBQWdCLENBQXNDLEVBQUssRUFBRSxRQUFjO1FBQ2hGLHNCQUFjLENBQUMseUJBQWEsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRXpELE9BQU8sZ0JBQVMsQ0FBQyxnQkFBZ0IsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCwwQkFBMEI7SUFDMUIsa0JBQWtCO0lBQ1gsZ0JBQWdCLENBQXNDLEVBQUssRUFBRSxRQUFjO1FBQ2hGLHNCQUFjLENBQUMseUJBQWEsQ0FBQyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUUsQ0FBQyxD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