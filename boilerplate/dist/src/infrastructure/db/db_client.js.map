{"version":3,"file":"db_client.js","sourceRoot":"","sources":["../../../../src/infrastructure/db/db_client.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,oDAA4B;AAC5B,wDAA8C;AAC9C,4DAAyD;AACzD,wDAA+D;AAC/D,4DAAwE;AAGxE,SAAsB,iBAAiB;;QACnC,MAAM,MAAM,GAAG,eAAM,CAAC,cAAc,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;QAClE,MAAM,WAAW,GAAG,eAAM,CAAC,QAAQ,EAAE,CAAC;QACtC,MAAM,aAAa,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;QAErE,IAAI,aAAa;YAAE,OAAO,aAAa,CAAC,EAAE,CAAC;QAC3C,OAAO,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;CAAA;AAPD,8CAOC;AACD,SAAsB,gBAAgB,CAAC,QAAgB;;QACnD,MAAM,QAAQ,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QAChD,MAAM,IAAI,GAAG,WAAI,CAAC,cAAc,CAAC;YAC7B,SAAS,EAAE,OAAO;YAClB,QAAQ,EAAE,OAAO;YACjB,QAAQ,EAAE,OAAO;YACjB,KAAK,EAAE,wBAAwB;YAC/B,QAAQ;YACR,QAAQ;SACX,CAAC,CAAC;QACH,MAAM,SAAS,GAAG,WAAI,CAAC,QAAQ,EAAE,CAAC;QAClC,MAAM,gBAAgB,GAAG,MAAM,SAAS,CAAC,OAAO,CAAC;YAC7C,GAAG,EAAE;gBACD,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE;gBACvC,EAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE;aAChD;SACJ,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,EAAE;YACnB,IAAI,CAAC,OAAO,CAAC,eAAQ,CAAC,KAAK,CAAC,CAAC;YAC7B,MAAM,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAChC;IACL,CAAC;CAAA;AArBD,4CAqBC;AAED,SAAsB,iBAAiB,CAAC,OAAe;;QACnD,OAAO,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC7C,kBAAQ,CAAC,OAAO,CAAC,OAAO,EAAE;gBACtB,kBAAkB,EAAE,IAAI;gBACxB,eAAe,EAAE,IAAI;gBACrB,cAAc,EAAE,IAAI;gBACpB,gBAAgB,EAAE,KAAK;aAC1B,CAAC,CAAC;YACH,MAAM,EAAE,GAAG,kBAAQ,CAAC,UAAU,CAAC;YAC/B,EAAE,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,CAAQ,EAAE,EAAE;gBACxB,8BAAqB,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;gBACzD,MAAM,CAAC,CAAC,CAAC,CAAC;YACd,CAAC,CAAC,CAAC;YACH,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,GAAS,EAAE;gBACvB,8BAAqB,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAC;gBAE3D,OAAO,CAAC,kBAAQ,CAAC,CAAC;YACtB,CAAC,CAAA,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;CAAA;AAnBD,8CAmBC","sourcesContent":["import bcrypt from \"bcrypt\";\nimport mongoose, { Mongoose } from \"mongoose\";\nimport { Tenant } from \"../../core/domain/models/tenant\";\nimport { User, UserRole } from \"../../core/domain/models/user\";\nimport { winstonLoggerInstance } from \"../bootstrapping/loaders/logger\";\n\nexport type DbClient = Mongoose;\nexport async function seedDefaultTenant() {\n    const tenant = Tenant.createInstance(\"Default\", \"Default tenant\");\n    const tenantModel = Tenant.getModel();\n    const defaultTenant = await tenantModel.findOne({ name: \"Default\" });\n\n    if (defaultTenant) return defaultTenant.id;\n    return tenantModel.create(tenant);\n}\nexport async function seedDefaultAdmin(tenantId: string) {\n    const password = await bcrypt.hash(\"123qwe\", 1);\n    const user = User.createInstance({\n        firstName: \"Admin\",\n        lastName: \"Admin\",\n        username: \"Admin\",\n        email: \"defaultAdmin@email.com\",\n        tenantId,\n        password\n    });\n    const userModel = User.getModel();\n    const defaultAdminUser = await userModel.findOne({\n        $or: [\n            { email: user.email, tenant: tenantId },\n            { username: user.username, tenant: tenantId }\n        ]\n    });\n    if (!defaultAdminUser) {\n        user.setRole(UserRole.ADMIN);\n        await userModel.create(user);\n    }\n}\n\nexport async function getDatabaseClient(connStr: string) {\n    return new Promise<DbClient>((resolve, reject) => {\n        mongoose.connect(connStr, {\n            useUnifiedTopology: true,\n            useNewUrlParser: true,\n            useCreateIndex: true,\n            useFindAndModify: false\n        });\n        const db = mongoose.connection;\n        db.on(\"error\", (e: Error) => {\n            winstonLoggerInstance.error(\"❌ Db connection error:\", e);\n            reject(e);\n        });\n        db.once(\"open\", async () => {\n            winstonLoggerInstance.info(\"✔️  Db connection successful\");\n\n            resolve(mongoose);\n        });\n    });\n}\n"]}