{"version":3,"file":"base_repository.js","sourceRoot":"","sources":["../../../../../src/infrastructure/db/repositories/base_repository.ts"],"names":[],"mappings":"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","sourcesContent":["import { plainToClassFromExist } from \"class-transformer\";\nimport { unmanaged } from \"inversify\";\nimport { Document, Model } from \"mongoose\";\nimport { TYPES } from \"../../../core/domain/constants/types\";\nimport { IBaseRepository, Query } from \"../../../core/domain/data/repositories\";\nimport { BaseEntity } from \"../../../core/domain/models/base\";\nimport { iocContainer, provideSingleton } from \"../../config/ioc\";\nimport { winstonLoggerInstance } from \"../../bootstrapping/loaders/logger\";\n\n@provideSingleton(BaseRepository)\nexport class BaseRepository<TEntity extends BaseEntity, TModel extends Document>\n    implements IBaseRepository<TEntity> {\n    protected Model: Model<TModel>;\n    protected _constructor: () => TEntity;\n\n    public constructor(\n        @unmanaged() model: Model<TModel>,\n        @unmanaged() constructor: () => TEntity\n    ) {\n        model.schema.set(\"toObject\", {\n            virtuals: true,\n            versionKey: false,\n            transform: (doc, ret) => {\n                delete ret._id;\n                return ret;\n            }\n        });\n        this.Model = model;\n        this._constructor = constructor;\n    }\n\n    public async findAll() {\n        const query = JSON.parse(\n            JSON.stringify({\n                isDeleted: { $ne: true },\n                tenant: this.getCurrentTenant()\n            })\n        );\n        return new Promise<TEntity[]>((resolve, reject) => {\n            this.Model.find(query, (err, res) => {\n                if (err) return reject(err);\n                return resolve(this.readMapper(res) as TEntity[]);\n            });\n        });\n    }\n    public async pagedFindAll({\n        searchStr,\n        skip,\n        limit\n    }: {\n        searchStr?: string;\n        skip: number;\n        limit: number;\n    }) {\n        const query = JSON.parse(\n            JSON.stringify({\n                $text: { $search: searchStr },\n                isDeleted: { $ne: true },\n                tenant: this.getCurrentTenant()\n            })\n        );\n        if (!Object.keys(query.$text).length) delete query.$text;\n\n        skip = skip < 0 ? 0 : Math.floor(skip);\n        limit = limit < 0 ? 0 : Math.floor(limit);\n        try {\n            const [totalCount, res] = await Promise.all([\n                this.Model.find()\n                    .countDocuments()\n                    .exec(),\n                this.Model.find(query)\n                    .sort(\"-createdAt\")\n                    .skip(skip)\n                    .limit(limit)\n                    .exec()\n            ]);\n            const items = this.readMapper(res) as TEntity[];\n            return { totalCount, items };\n        } catch (error) {\n            winstonLoggerInstance.error(error);\n            throw new Error(error);\n        }\n    }\n    public async findById(id: string) {\n        const query = JSON.parse(\n            JSON.stringify({\n                _id: id,\n                isDeleted: { $ne: true },\n                tenant: this.getCurrentTenant()\n            })\n        );\n\n        return new Promise<TEntity>((resolve, reject) => {\n            this.Model.findOne(query, (err, res) => {\n                if (err) return reject(err);\n                if (!res) return resolve();\n                resolve(this.readMapper(res) as TEntity);\n            });\n        });\n    }\n    hardFindById(id: string): Promise<TEntity> {\n        return new Promise<TEntity>((resolve, reject) => {\n            this.Model.findById(id, (err, res) => {\n                if (err) return reject(err);\n                if (!res) return resolve();\n\n                return resolve(this.readMapper(res) as TEntity);\n            });\n        });\n    }\n\n    public async insertOrUpdate(doc: TEntity): Promise<TEntity> {\n        return new Promise<TEntity>((resolve, reject) => {\n            if (doc.id) {\n                const query = JSON.parse(\n                    JSON.stringify({\n                        _id: doc.id,\n                        isDeleted: { $ne: true },\n                        tenant: this.getCurrentTenant()\n                    })\n                );\n                this.Model.findByIdAndUpdate(\n                    query,\n                    doc,\n                    { new: true },\n                    (err, res) => {\n                        if (err) return reject(err);\n                        if (!res) return resolve();\n                        Object.assign(doc, this.readMapper(res));\n                        return resolve(doc);\n                    }\n                );\n            } else {\n                const instance = new this.Model(doc);\n                instance.save((err, res) => {\n                    if (err) return reject(err);\n                    Object.assign(doc, this.readMapper(res));\n                    return resolve(doc);\n                });\n            }\n        });\n    }\n    public async insertMany(docs: TEntity[]): Promise<void> {\n        try {\n            const list = (await this.Model.insertMany(docs)) as any;\n            docs.length = 0;\n            [].push.apply(docs, list as TEntity[]);\n        } catch (error) {\n            winstonLoggerInstance.error(error);\n            throw new Error(error);\n        }\n    }\n    public findManyById(ids: string[]) {\n        const query = JSON.parse(\n            JSON.stringify({\n                _id: { $in: ids },\n                isDeleted: { $ne: true },\n                tenant: this.getCurrentTenant()\n            })\n        );\n        return new Promise<TEntity[]>((resolve, reject) => {\n            this.Model.find(query, (err, res) => {\n                if (err) return reject(err);\n                resolve(this.readMapper(res) as TEntity[]);\n            });\n        });\n    }\n\n    public findManyByQuery(query: Query<TEntity>) {\n        query = JSON.parse(\n            JSON.stringify({\n                ...query,\n                isDeleted: { $ne: true },\n                tenant: this.getCurrentTenant()\n            })\n        );\n        return new Promise<TEntity[]>((resolve, reject) => {\n            this.Model.find(query, (err, res) => {\n                if (err) return reject(err);\n                if (!res) return resolve();\n                resolve(this.readMapper(res) as TEntity[]);\n            });\n        });\n    }\n    public async findOneByQuery(query: Query<TEntity>) {\n        query = JSON.parse(\n            JSON.stringify({\n                ...query,\n                isDeleted: { $ne: true },\n                tenant: this.getCurrentTenant()\n            })\n        );\n        return new Promise<TEntity>((resolve, reject) => {\n            this.Model.findOne(query, (err, res) => {\n                if (err) return reject(err);\n                if (!res) return resolve();\n                resolve(this.readMapper(res) as TEntity);\n            });\n        });\n    }\n    async deleteById(id: string): Promise<boolean> {\n        const item = await this.findById(id);\n        if (!item) return false;\n\n        item.delete();\n        await this.insertOrUpdate(item);\n        return true;\n    }\n\n    findOneByQueryAndUpdate(\n        query: Query<any>,\n        update: { [key: string]: object }\n    ): Promise<TEntity> {\n        query = JSON.parse(\n            JSON.stringify({\n                ...query,\n                isDeleted: { $ne: true },\n                tenant: this.getCurrentTenant()\n            })\n        );\n        return new Promise<TEntity>((resolve, reject) => {\n            this.Model.findOneAndUpdate(\n                query,\n                update,\n                { new: true },\n                (err, res) => {\n                    if (err) return reject(err);\n                    if (!res) return resolve();\n                    return resolve(this.readMapper(res) as TEntity);\n                }\n            );\n        });\n    }\n\n    // deleteOneByQuery(query: Query<TEntity>): Promise<number> {\n    //     throw new Error(\"Method not implemented.\");\n    // }\n    // deleteManyByQuery(query?: Query<TEntity> | undefined): Promise<number> {\n    //     throw new Error(\"Method not implemented.\");\n    // }\n\n    // #region Helper methods\n    /**\n     * Maps '_id' from mongodb to 'id' of TEntity\n     *\n     * @private\n     * @param {TModel} model\n     * @returns {TEntity}\n     * @memberof BaseRepository\n     */\n    private readMapper = (model: TModel | TModel[]): TEntity | TEntity[] => {\n        if (Array.isArray(model)) {\n            const entities: TEntity[] = [];\n\n            return plainToClassFromExist(entities, model);\n        }\n        const entity: TEntity = this._constructor();\n\n        return plainToClassFromExist(entity, model.toJSON());\n    };\n    private getCurrentTenant() {\n        return this._constructor().type !== \"Tenant\"\n            ? iocContainer.get<any>(TYPES.TenantId)\n            : undefined;\n    }\n    // #endregion\n}\n"]}