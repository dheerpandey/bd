{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/infrastructure/bootstrapping/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Agenda from \"agenda\";\nimport { Container, ContainerModule, decorate, injectable } from \"inversify\";\nimport { buildProviderModule } from \"inversify-binding-decorators\";\nimport { InversifyExpressServer } from \"inversify-express-utils\";\nimport swaggerUi from \"swagger-ui-express\";\nimport { Controller } from \"tsoa\";\nimport swaggerJsonDoc from \"../../../swagger.json\";\nimport { TYPES } from \"../../core/domain/constants/types\";\nimport { exceptionLoggerMiddleware } from \"../../ui/api/middleware/interceptor_middleware\";\nimport { RegisterRoutes } from \"../../ui/api/routes\";\nimport { config } from \"../config\";\nimport { swaggerGen } from \"../config/swagger.config\";\nimport {\n    DbClient,\n    getDatabaseClient,\n    seedDefaultAdmin,\n    seedDefaultTenant\n} from \"../db/db_client\";\nimport { getAgendaInstance } from \"./loaders/agenda_loader\";\nimport \"./loaders/events\";\nimport { App, expressLoader } from \"./loaders/express\";\nimport { Jobs } from \"./loaders/jobs\";\nimport { winstonLoggerInstance as log } from \"./loaders/logger\";\n\nexport async function bootstrap({\n    iocContainer,\n    connStr,\n    containerModules = []\n}: {\n    iocContainer: Container;\n    connStr: string;\n    containerModules?: ContainerModule[];\n}): Promise<App> {\n    if (iocContainer.isBound(TYPES.App) === true)\n        return iocContainer.get<App>(TYPES.App);\n\n    // iocContainer.applyMiddleware(makeLoggerMiddleware());\n    const dbClient = await getDatabaseClient(connStr);\n    iocContainer.bind<DbClient>(TYPES.DbClient).toConstantValue(dbClient);\n    iocContainer\n        .bind<Agenda>(TYPES.Agenda)\n        .toConstantValue(getAgendaInstance(connStr));\n\n    iocContainer.load(...containerModules);\n\n    decorate(injectable(), Controller);\n    iocContainer.load(buildProviderModule());\n    log.info(\"✔️  Dependency Injector loaded\");\n\n    await seedDb();\n\n    Jobs.forEach(async job => job(iocContainer.get<Agenda>(TYPES.Agenda)));\n    log.info(\"✔️  Jobs loaded\");\n\n    // Configure express server using inversify IoC\n    const server = new InversifyExpressServer(\n        iocContainer,\n        null,\n        null,\n        null,\n        null,\n        false\n    );\n\n    server.setConfig((app: App) => expressLoader(app));\n    log.info(\"✔️  Express loaded\");\n\n    server.setErrorConfig(app => {\n        // Catch and log all exceptions\n        app.use(exceptionLoggerMiddleware);\n    });\n    const app = server.build() as App;\n    await setupSwagger(app);\n    log.info(`✔️  Environment: ${config.env}`);\n\n    return app;\n}\nasync function setupSwagger(app: App) {\n    log.info(\"✔️  Generating routes...\");\n    RegisterRoutes(app);\n    log.info(\"✔️  Generating swagger doc...\");\n    await swaggerGen();\n    app.use(\"/api-docs\", swaggerUi.serve, swaggerUi.setup(swaggerJsonDoc));\n}\nasync function seedDb() {\n    log.info(\"✔️  Seeding DB...\");\n    const tenant = await seedDefaultTenant();\n    await seedDefaultAdmin(tenant);\n}\n"]}