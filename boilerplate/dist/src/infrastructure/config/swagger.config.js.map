{"version":3,"file":"swagger.config.js","sourceRoot":"","sources":["../../../../src/infrastructure/config/swagger.config.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,+BAKc;AACd,mCAAiC;AACjC,0EAG6C;AAE7C,MAAM,QAAQ,GAAG,cAAM,CAAC,GAAG,CAAC,MAAM,CAAC;AACnC,MAAM,SAAS,GAAG,gBAAgB,CAAC;AACnC,MAAM,WAAW,GAAG,+BAA+B,CAAC;AACpD,MAAM,QAAQ,GACV,cAAM,CAAC,GAAG,KAAK,aAAa,IAAI,cAAM,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;AAChE,QAAA,UAAU,GAAG,GAAS,EAAE;IACjC,MAAM,cAAc,GAAkB;QAClC,QAAQ;QACR,SAAS;QACT,mBAAmB,EAAE;YACjB,CAAC,8BAAW,CAAC,EAAE;gBACX,IAAI,EAAE,QAAQ;gBACd,EAAE,EAAE,QAAQ;gBACZ,IAAI,EAAE,8BAAW;gBACjB,WAAW,EAAE,WAAW;aAC3B;YACD,CAAC,mCAAgB,CAAC,EAAE;gBAChB,IAAI,EAAE,QAAQ;gBACd,EAAE,EAAE,QAAQ;gBACZ,IAAI,EAAE,mCAAgB;gBACtB,WAAW,EAAE,kBAAkB;aAClC;SACJ;QACD,8BAA8B,EAAE,iBAAiB;QACjD,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI;QACtB,WAAW,EAAE,8CAA8C;QAC3D,OAAO,EAAE,OAAO;QAChB,IAAI,EAAE,6BAA6B;QACnC,WAAW,EAAE,CAAC;QACd,OAAO,EAAE,CAAC,QAAQ,CAAC;QACnB,eAAe,EAAE,IAAI;QACrB,mBAAmB,EAAE,CAAC,WAAW,CAAC;KACrC,CAAC;IAEF,MAAM,YAAY,GAAiB;QAC/B,QAAQ;QACR,SAAS;QACT,UAAU,EAAE,SAAS;QACrB,oBAAoB,EAAE,yCAAyC;QAC/D,SAAS,EAAE,iCAAiC;QAC5C,SAAS,EAAE,cAAc;QACzB,mBAAmB,EAAE,CAAC,WAAW,CAAC;KACrC,CAAC;IAEF,IAAI,cAAM,CAAC,GAAG,KAAK,MAAM;QACrB,MAAM,0BAAmB,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;IAE5D,MAAM,qBAAc,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;AACvD,CAAC,CAAA,CAAC","sourcesContent":["import {\n    generateRoutes,\n    generateSwaggerSpec,\n    RoutesConfig,\n    SwaggerConfig\n} from \"tsoa\";\nimport { config } from \"./index\";\nimport {\n    X_TENANT_ID,\n    X_AUTH_TOKEN_KEY\n} from \"../../ui/constants/header_constants\";\n\nconst basePath = config.api.prefix;\nconst entryFile = \"./src/index.ts\";\nconst controllers = \"./src/ui/api/controllers/*.ts\";\nconst protocol =\n    config.env === \"development\" || config.env === \"test\" ? \"http\" : \"https\";\nexport const swaggerGen = async () => {\n    const swaggerOptions: SwaggerConfig = {\n        basePath,\n        entryFile,\n        securityDefinitions: {\n            [X_TENANT_ID]: {\n                type: \"apiKey\",\n                in: \"header\",\n                name: X_TENANT_ID,\n                description: \"Tenant ID\"\n            },\n            [X_AUTH_TOKEN_KEY]: {\n                type: \"apiKey\",\n                in: \"header\",\n                name: X_AUTH_TOKEN_KEY,\n                description: \"JWT access token\"\n            }\n        },\n        noImplicitAdditionalProperties: \"throw-on-extras\",\n        host: process.env.HOST,\n        description: \"Enterprise NodeJs/Typescript API boilerplate\",\n        version: \"1.0.0\",\n        name: \"node-typescript-boilerplate\",\n        specVersion: 3,\n        schemes: [protocol],\n        outputDirectory: \"./\",\n        controllerPathGlobs: [controllers]\n    };\n\n    const routeOptions: RoutesConfig = {\n        basePath,\n        entryFile,\n        middleware: \"express\",\n        authenticationModule: \"./src/ui/api/middleware/auth_middleware\",\n        iocModule: \"./src/infrastructure/config/ioc\",\n        routesDir: \"./src/ui/api\",\n        controllerPathGlobs: [controllers]\n    };\n\n    if (config.env !== \"test\")\n        await generateSwaggerSpec(swaggerOptions, routeOptions);\n\n    await generateRoutes(routeOptions, swaggerOptions);\n};\n"]}