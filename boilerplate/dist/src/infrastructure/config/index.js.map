{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/infrastructure/config/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Joi from \"@hapi/joi\";\nimport dotenv from \"dotenv\";\n\n// Load .env configuration into nodejs process\nconst envFound = dotenv.config();\nif (!envFound) {\n    // This error should crash whole process\n    throw new Error(\"⚠️  Couldn't find .env file  ⚠️\");\n}\n\nconst envConfigSchema = Joi.object({\n    NODE_ENV: Joi.string()\n        .allow(\"development\", \"production\", \"test\")\n        .default(\"development\"),\n    PORT: Joi.number().default(3000),\n    JWT_SECRET: Joi.string()\n        .required()\n        .description(\"JWT Secret required\"),\n    HOST: Joi.string().default(\"localhost:3000\"),\n    APP_EMAIL: Joi.string().default(\"node-typescript-boilerplate@sample.com\"),\n    LOG_LEVEL: Joi.string().default(\"silly\"),\n    MAILGUN_API_KEY: Joi.string().description(\"Mail gun API key\"),\n    MAILGUN_API_DOMAIN: Joi.string(),\n    AGENDA_DB_COLLECTION: Joi.string().default(\"jobs\"),\n    AGENDA_CONCURRENCY: Joi.number().default(20),\n    MONGODB_URI: Joi.string().default(\n        \"mongodb://localhost:27017/node-typescript-boilerplate\"\n    ),\n    APP_MAX_SIGNIN_ATTEMPTS: Joi.number().default(5),\n    APP_LOCKOUT_TIME: Joi.number().default(5)\n})\n    .unknown()\n    .required();\n\nconst { error, value: envConfig } = envConfigSchema.validate(process.env);\nif (error) throw new Error(`Config validation error: ${error.message}`);\n\nexport const config = {\n    port: parseInt(envConfig.PORT as string, 10),\n    host: envConfig.HOST as string,\n    env: envConfig.NODE_ENV as string,\n    mongoDbConnection: envConfig.MONGODB_URI as string,\n    jwtSecret: envConfig.JWT_SECRET as string,\n\n    userLockout: {\n        maxSignInAttempts: parseInt(\n            envConfig.APP_MAX_SIGNIN_ATTEMPTS as string,\n            10\n        ),\n        lockoutTime: parseInt(envConfig.APP_LOCKOUT_TIME as string, 10)\n    },\n\n    /**\n     * Used by winston logger\n     */\n    logs: {\n        level: envConfig.LOG_LEVEL as string\n    },\n\n    /**\n     * Agenda.js stuff\n     */\n    agenda: {\n        dbCollection: envConfig.AGENDA_DB_COLLECTION as string,\n        concurrency: parseInt(envConfig.AGENDA_CONCURRENCY as string, 10)\n    },\n    /**\n     * Agendash config\n     */\n    agendash: {\n        user: \"agendash\",\n        password: \"123456\"\n    },\n    /**\n     * API configs\n     */\n    api: {\n        prefix: \"/api/v1\"\n    },\n    /**\n     * Mailgun email credentials\n     */ emails: {\n        apiKey: envConfig.MAILGUN_API_KEY as string,\n        domain: envConfig.MAILGUN_API_DOMAIN as string,\n        from: envConfig.APP_EMAIL as string\n    }\n};\n"]}