{"version":3,"file":"mail_service.js","sourceRoot":"","sources":["../../../../src/infrastructure/services/mail_service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA,4DAAiC;AACjC,6DAA0D;AAE1D,sCAAmC;AACnC,uCAA+D;AAC/D,+CAA+C;AAG/C,IAAa,WAAW,mBAAxB,MAAa,WAAW;IAAxB;QACqB,aAAQ,GAAoB,oBAAO,CAAC;YACjD,MAAM,EAAE,eAAM,CAAC,MAAM,CAAC,MAAM;YAC5B,MAAM,EAAE,eAAM,CAAC,MAAM,CAAC,MAAM;SAC/B,CAAC,CAAC;IA+BP,CAAC;IA7BgB,gBAAgB,CACzB,EAAU,EACV,OAAe,EACf,IAAY;;YAEZ;;eAEG;YACH,8CAA8C;YAC9C,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ;iBAC3B,QAAQ,EAAE;iBACV,IAAI,CAAC,EAAE,IAAI,EAAE,eAAM,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAE3D,OAAO,IAAI,IAAI,IAAI,CAAC;QACxB,CAAC;KAAA;IACM,kBAAkB,CAAC,YAAyB,EAAE,IAAS;QAC1D,MAAM,MAAM,GAAG,kBAAY,CAAC,GAAG,CAAS,aAAK,CAAC,MAAM,CAAC,CAAC;QACtD,QAAQ,YAAY,EAAE;YAClB,KAAK,sBAAW,CAAC,iBAAiB;gBAC9B,MAAM,CAAC,QAAQ,CACX,cAAc,EACd,sBAAW,CAAC,sBAAW,CAAC,iBAAiB,CAAC,EAC1C,IAAI,CACP,CAAC;gBACF,MAAM;YACV;gBACI,MAAM;SACb;IACL,CAAC;CACJ,CAAA;AAnCY,WAAW;IADvB,sBAAgB,CAAC,aAAW,CAAC;GACjB,WAAW,CAmCvB;AAnCY,kCAAW","sourcesContent":["import Agenda from \"agenda\";\nimport Mailgun from \"mailgun-js\";\nimport { TYPES } from \"../../core/domain/constants/types\";\nimport { IMailService } from \"../../core/application/mail_service\";\nimport { config } from \"../config\";\nimport { iocContainer, provideSingleton } from \"../config/ioc\";\nimport { MailJobType } from \"../jobs/mail_job\";\n\n@provideSingleton(MailService)\nexport class MailService implements IMailService {\n    private readonly _mailgun: Mailgun.Mailgun = Mailgun({\n        apiKey: config.emails.apiKey,\n        domain: config.emails.domain\n    });\n\n    public async sendWelcomeEmail(\n        to: string,\n        subject: string,\n        text: string\n    ): Promise<boolean> {\n        /**\n         * @TODO Call Mailchimp/Sendgrid or whatever\n         */\n        // Added example for sending mail from mailgun\n        const resp = await this._mailgun\n            .messages()\n            .send({ from: config.emails.from, to, subject, text });\n\n        return resp != null;\n    }\n    public startEmailSequence(sequenceType: MailJobType, data: any): void {\n        const agenda = iocContainer.get<Agenda>(TYPES.Agenda);\n        switch (sequenceType) {\n            case MailJobType.SEND_WELCOME_MAIL:\n                agenda.schedule(\n                    \"in 2 minutes\",\n                    MailJobType[MailJobType.SEND_WELCOME_MAIL],\n                    data\n                );\n                break;\n            default:\n                break;\n        }\n    }\n}\n"]}