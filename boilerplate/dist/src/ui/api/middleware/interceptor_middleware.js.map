{"version":3,"file":"interceptor_middleware.js","sourceRoot":"","sources":["../../../../../src/ui/api/middleware/interceptor_middleware.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA,0EAA2C;AAC3C,qEAAyD;AACzD,2DAAwD;AACxD,4DAAsE;AACtE,uCAAwC;AAGxC,IAAa,iBAAiB,yBAA9B,MAAa,iBAAkB,SAAQ,wCAAc;IAC3C,OAAO,CACT,GAAY,EACZ,GAAa,EACb,IAAkB;;YAElB,+DAA+D;YAC/D,aAAa;YACb,yCAAyC;YACzC,yBAAyB;YACzB,oCAAoC;YACpC,yCAAyC;YACzC,MAAM;YACN,IAAI,EAAE,CAAC;QACX,CAAC;KAAA;CACJ,CAAA;AAfY,iBAAiB;IAD7B,sBAAgB,CAAC,mBAAiB,CAAC;GACvB,iBAAiB,CAe7B;AAfY,8CAAiB;AAiB9B,SAAgB,yBAAyB,CACrC,KAAY,EACZ,GAAY,EACZ,GAAa,EACb,IAAkB;IAElB,+DAA+D;IAE/D,cAAc;IACd,qCAAqC;IACrC,uBAAuB;IACvB,gCAAgC;IAChC,mBAAmB;IACnB,qCAAqC;IACrC,MAAM;IAEN,IAAI,KAAK,YAAY,iBAAS,EAAE;QAC5B,yCAAyC;QACzC,OAAO,GAAG;aACL,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC;aACpB,IAAI,iCAAM,KAAK,KAAE,OAAO,EAAE,KAAK,CAAC,OAAO,IAAG,CAAC;KACnD;IAED,KAAK;QACD,eAAM,CAAC,GAAG,KAAK,aAAa,IAAI,eAAM,CAAC,GAAG,KAAK,MAAM;YACjD,CAAC,CAAC,IAAI,iBAAS,CAAC,2BAAU,CAAC,qBAAqB,EAAE,KAAK,CAAC,OAAO,CAAC;YAChE,CAAC,CAAC,IAAI,iBAAS,CAAC,2BAAU,CAAC,qBAAqB,CAAC,CAAC;IAC1D,GAAG,CAAC,MAAM,CAAC,2BAAU,CAAC,qBAAqB,CAAC,CAAC,IAAI,iCAC1C,KAAK,KACR,OAAO,EAAE,KAAK,CAAC,OAAO,IACxB,CAAC;AACP,CAAC;AA/BD,8DA+BC","sourcesContent":["import { NextFunction, Request, Response } from \"express\";\nimport httpStatus from \"http-status-codes\";\nimport { BaseMiddleware } from \"inversify-express-utils\";\nimport { config } from \"../../../infrastructure/config\";\nimport { provideSingleton } from \"../../../infrastructure/config/ioc\";\nimport { HttpError } from \"../../error\";\n\n@provideSingleton(RequestMiddleware)\nexport class RequestMiddleware extends BaseMiddleware {\n    async handler(\n        req: Request,\n        res: Response,\n        next: NextFunction\n    ): Promise<void> {\n        // const log = iocContainer.get<ILoggerService>(LoggerService);\n        // log.info(`\n        //     ----------------------------------\n        //     REQUEST MIDDLEWARE\n        //     HTTP ${req.method} ${req.url}\n        //     ----------------------------------\n        // `);\n        next();\n    }\n}\n\nexport function exceptionLoggerMiddleware(\n    error: Error,\n    req: Request,\n    res: Response,\n    next: NextFunction\n) {\n    // const log = iocContainer.get<ILoggerService>(LoggerService);\n\n    // log.error(`\n    // ----------------------------------\n    // EXCEPTION MIDDLEWARE\n    // HTTP ${req.method} ${req.url}\n    // ${error.message}\n    // ----------------------------------\n    // `);\n\n    if (error instanceof HttpError) {\n        //   sendHttpErrorModule(req, res, next);\n        return res\n            .status(error.status)\n            .json({ ...error, message: error.message });\n    }\n\n    error =\n        config.env === \"development\" || config.env === \"test\"\n            ? new HttpError(httpStatus.INTERNAL_SERVER_ERROR, error.message)\n            : new HttpError(httpStatus.INTERNAL_SERVER_ERROR);\n    res.status(httpStatus.INTERNAL_SERVER_ERROR).json({\n        ...error,\n        message: error.message\n    });\n}\n"]}