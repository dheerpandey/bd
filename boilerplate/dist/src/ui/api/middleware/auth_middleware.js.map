{"version":3,"file":"auth_middleware.js","sourceRoot":"","sources":["../../../../../src/ui/api/middleware/auth_middleware.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request } from \"express\";\nimport httpStatus from \"http-status-codes\";\nimport { Container } from \"inversify\";\nimport jwt from \"jsonwebtoken\";\nimport { TYPES } from \"../../../core/domain/constants/types\";\nimport { ITenantRepository } from \"../../../core/domain/data/repositories\";\nimport { UserRole } from \"../../../core/domain/models/user\";\nimport { config as env } from \"../../../infrastructure/config\";\nimport { iocContainer } from \"../../../infrastructure/config/ioc\";\nimport { TenantRepository } from \"../../../infrastructure/db/repositories/tenant_repository\";\nimport { isIdValid } from \"../../../infrastructure/utils/server_utils\";\nimport {\n    X_AUTH_TOKEN_KEY,\n    X_TENANT_ID\n} from \"../../constants/header_constants\";\nimport { HttpError } from \"../../error\";\nimport { DecodedJwt } from \"../../services/auth_service\";\n\nfunction authentication(iocContainer: Container) {\n    return async (\n        req: Request,\n        securityName: string,\n        scopes: string[] = [\"user\"]\n    ): Promise<any> => {\n        switch (securityName) {\n            case X_AUTH_TOKEN_KEY: {\n                const token = req.header(X_AUTH_TOKEN_KEY);\n                // Check if X-Auth-Token header was passed in sign-up endpoint\n                if (!token)\n                    throw new HttpError(\n                        httpStatus.UNAUTHORIZED,\n                        `Missing ${X_AUTH_TOKEN_KEY} header!`\n                    );\n                await assignJwt(token, scopes, iocContainer);\n                return token;\n            }\n            case X_TENANT_ID: {\n                const tenantId = req.header(X_TENANT_ID);\n                if (!tenantId)\n                    throw new HttpError(\n                        httpStatus.BAD_REQUEST,\n                        `Missing ${X_TENANT_ID} header!`\n                    );\n                await assignTenantToReqAsync(iocContainer, tenantId);\n                return tenantId;\n            }\n            default:\n                throw new HttpError(\n                    httpStatus.INTERNAL_SERVER_ERROR,\n                    \"Invalid security name\"\n                );\n        }\n    };\n}\n\nasync function assignJwt(\n    token: string,\n    scopes: string[],\n    iocContainer: Container\n) {\n    try {\n        const decodedJwt = jwt.verify(token, env.jwtSecret) as DecodedJwt;\n        const expectedUserRole = (UserRole as any)[scopes[0].toUpperCase()];\n        if (\n            expectedUserRole !== UserRole.USER &&\n            decodedJwt.role !== expectedUserRole\n        )\n            throw new HttpError(httpStatus.FORBIDDEN, \"Access denied!\");\n\n        const tenantRepository = iocContainer.get<ITenantRepository>(\n            TenantRepository\n        );\n        const tenant = await tenantRepository.findById(decodedJwt.tenantId);\n\n        if (!tenant || !tenant.isActive)\n            throw new HttpError(\n                httpStatus.UNAUTHORIZED,\n                \"Tenant is not available!\"\n            );\n        if (!iocContainer.isBound(TYPES.TenantId))\n            iocContainer\n                .bind<string>(TYPES.TenantId)\n                .toConstantValue(decodedJwt.tenantId);\n\n        if (iocContainer.isBound(TYPES.DecodedJwt))\n            iocContainer.unbind(TYPES.DecodedJwt);\n        iocContainer\n            .bind<DecodedJwt>(TYPES.DecodedJwt)\n            .toConstantValue(decodedJwt);\n    } catch (error) {\n        throw new HttpError(error.status, error.message);\n    }\n}\nasync function assignTenantToReqAsync(\n    iocContainer: Container,\n    tenantId: string\n) {\n    if (!isIdValid(tenantId))\n        throw new HttpError(\n            httpStatus.BAD_REQUEST,\n            `${tenantId} is not a valid ${X_TENANT_ID} header`\n        );\n    const tenantRepo = iocContainer.get<ITenantRepository>(TenantRepository);\n    const tenant = await tenantRepo.findById(tenantId);\n    if (!tenant)\n        throw new HttpError(\n            httpStatus.UNAUTHORIZED,\n            `Tenant ${tenantId} is unavailable`\n        );\n    if (iocContainer.isBound(TYPES.TenantId))\n        iocContainer.unbind(TYPES.TenantId);\n\n    iocContainer.bind<string>(TYPES.TenantId).toConstantValue(tenant.id);\n}\nexport const expressAuthentication = authentication(iocContainer);\n"]}