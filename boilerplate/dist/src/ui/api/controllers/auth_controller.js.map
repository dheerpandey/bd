{"version":3,"file":"auth_controller.js","sourceRoot":"","sources":["../../../../../src/ui/api/controllers/auth_controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,yDAAiD;AACjD,yCAAmC;AACnC,+BAAyD;AACzD,4DAAsE;AACtE,oDAI+B;AAC/B,8DAA0D;AAC1D,uDAAmD;AAMnD,IAAa,cAAc,sBAA3B,MAAa,cAAe,SAAQ,gCAAc;IAKjC,MAAM,CACP,KAAsB;;YAE9B,MAAM,IAAI,CAAC,eAAe,CAAC,gCAAY,CAAC,0BAAe,EAAE,KAAK,CAAC,CAAC,CAAC;YACjE,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;KAAA;IAIY,MAAM,CAAS,KAAsB;;YAC9C,MAAM,IAAI,CAAC,eAAe,CAAC,gCAAY,CAAC,0BAAe,EAAE,KAAK,CAAC,CAAC,CAAC;YACjE,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;KAAA;CACJ,CAAA;AAjBwB;IAApB,kBAAM,CAAC,0BAAW,CAAC;;oDAA6C;AAIjE;IAFC,WAAI,CAAC,QAAQ,CAAC;IACd,eAAQ,CAAC,aAAa,CAAC;IAEnB,WAAA,WAAI,EAAE,CAAA;;qCAAQ,0BAAe;;4CAIjC;AAID;IAFC,WAAI,CAAC,QAAQ,CAAC;IACd,eAAQ,CAAC,aAAa,CAAC;IACH,WAAA,WAAI,EAAE,CAAA;;qCAAQ,0BAAe;;4CAGjD;AAjBQ,cAAc;IAH1B,WAAI,CAAC,MAAM,CAAC;IACZ,YAAK,CAAC,MAAM,CAAC;IACb,sBAAgB,CAAC,gBAAc,CAAC;GACpB,cAAc,CAkB1B;AAlBY,wCAAc","sourcesContent":["import { plainToClass } from \"class-transformer\";\nimport { inject } from \"inversify\";\nimport { Body, Post, Route, Security, Tags } from \"tsoa\";\nimport { provideSingleton } from \"../../../infrastructure/config/ioc\";\nimport {\n    UserSignInInput,\n    UserSignUpDto,\n    UserSignUpInput\n} from \"../../models/user_dto\";\nimport { AuthService } from \"../../services/auth_service\";\nimport { BaseController } from \"./base_controller\";\nimport { IAuthService } from \"../../../core/domain/services/auth_service\";\n\n@Tags(\"Auth\")\n@Route(\"auth\")\n@provideSingleton(AuthController)\nexport class AuthController extends BaseController {\n    @inject(AuthService) private readonly _authService: IAuthService;\n\n    @Post(\"signUp\")\n    @Security(\"X-Tenant-Id\")\n    public async signUp(\n        @Body() input: UserSignUpInput\n    ): Promise<UserSignUpDto> {\n        await this.checkBadRequest(plainToClass(UserSignUpInput, input));\n        return this._authService.signUp(input);\n    }\n\n    @Post(\"signIn\")\n    @Security(\"X-Tenant-Id\")\n    public async signIn(@Body() input: UserSignInInput) {\n        await this.checkBadRequest(plainToClass(UserSignInInput, input));\n        return this._authService.signIn(input);\n    }\n}\n"]}