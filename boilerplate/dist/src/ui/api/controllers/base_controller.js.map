{"version":3,"file":"base_controller.js","sourceRoot":"","sources":["../../../../../src/ui/api/controllers/base_controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,qDAA4D;AAC5D,0EAA2C;AAC3C,+BAAkC;AAClC,6EAAuE;AACvE,uCAAwC;AAGxC,MAAsB,cAAe,SAAQ,iBAAU;IACnC,eAAe,CAAC,KAA0B;;YACtD,MAAM,MAAM,GAAG,MAAM,0BAAQ,CAAC,KAAK,CAAC,CAAC;YACrC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,MAAM,KAAK,GAAG,MAAM;qBACf,GAAG,CAAC,CAAC,KAAsB,EAAE,EAAE,CAAC,KAAK,CAAC,WAAW,CAAC;qBAClD,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;qBACjC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAChB,IAAI,CAAC,SAAS,CAAC,2BAAU,CAAC,WAAW,CAAC,CAAC;gBACvC,MAAM,IAAI,iBAAS,CAAC,2BAAU,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;aACtD;QACL,CAAC;KAAA;IACe,aAAa,CAAC,KAAU;;YACpC,IAAI,KAAK,EAAE;gBACP,IAAI,CAAC,SAAS,CAAC,2BAAU,CAAC,QAAQ,CAAC,CAAC;gBACpC,MAAM,IAAI,iBAAS,CAAC,2BAAU,CAAC,QAAQ,CAAC,CAAC;aAC5C;QACL,CAAC;KAAA;IACe,SAAS,CAAC,EAAO;;YAC7B,IAAI,CAAC,wBAAS,CAAC,EAAE,CAAC,EAAE;gBAChB,IAAI,CAAC,SAAS,CAAC,2BAAU,CAAC,WAAW,CAAC,CAAC;gBAEvC,MAAM,IAAI,iBAAS,CACf,2BAAU,CAAC,WAAW,EACtB,OAAO,EAAE,cAAc,CAC1B,CAAC;aACL;QACL,CAAC;KAAA;CACJ;AA5BD,wCA4BC","sourcesContent":["import { validate, ValidationError } from \"class-validator\";\nimport httpStatus from \"http-status-codes\";\nimport { Controller } from \"tsoa\";\nimport { isIdValid } from \"../../../infrastructure/utils/server_utils\";\nimport { HttpError } from \"../../error\";\nimport { BaseCreateEntityDto } from \"../../models/base_dto\";\n\nexport abstract class BaseController extends Controller {\n    protected async checkBadRequest(input: BaseCreateEntityDto) {\n        const errors = await validate(input);\n        if (errors.length > 0) {\n            const error = errors\n                .map((error: ValidationError) => error.constraints)\n                .map(err => Object.values(err)[0])\n                .join(\", \");\n            this.setStatus(httpStatus.BAD_REQUEST);\n            throw new HttpError(httpStatus.BAD_REQUEST, error);\n        }\n    }\n    protected async checkConflict(input: any) {\n        if (input) {\n            this.setStatus(httpStatus.CONFLICT);\n            throw new HttpError(httpStatus.CONFLICT);\n        }\n    }\n    protected async checkUUID(id: any) {\n        if (!isIdValid(id)) {\n            this.setStatus(httpStatus.BAD_REQUEST);\n\n            throw new HttpError(\n                httpStatus.BAD_REQUEST,\n                `ID \"${id}\" is invalid`\n            );\n        }\n    }\n}\n"]}