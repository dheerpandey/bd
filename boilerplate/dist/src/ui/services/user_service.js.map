{"version":3,"file":"user_service.js","sourceRoot":"","sources":["../../../../src/ui/services/user_service.ts"],"names":[],"mappings":"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","sourcesContent":["import bcrypt from \"bcrypt\";\nimport httpStatus from \"http-status-codes\";\nimport { IUserRepository } from \"../../core/domain/data/repositories\";\nimport { PASSWORD_SALT_ROUND, User } from \"../../core/domain/models/user\";\nimport { config } from \"../../infrastructure/config\";\nimport { inject, provideSingleton } from \"../../infrastructure/config/ioc\";\nimport { UserRepository } from \"../../infrastructure/db/repositories/user_repository\";\nimport { HttpError } from \"../error\";\nimport { IUserService } from \"../../core/domain/services/user_service\";\nimport { UserSignUpInput } from \"../models/user_dto\";\n\n@provideSingleton(UserService)\nexport class UserService implements IUserService {\n    @inject(UserRepository) private readonly _userRepository: IUserRepository;\n\n    async create(user: UserSignUpInput): Promise<User> {\n        let newUser = await this._userRepository.findOneByQuery({\n            email: user.email\n        });\n        if (newUser)\n            throw new HttpError(\n                httpStatus.CONFLICT,\n                `User with email \"${newUser.email}\" already exist`\n            );\n\n        newUser = await this._userRepository.findOneByQuery({\n            username: user.username\n        });\n\n        if (newUser)\n            throw new HttpError(\n                httpStatus.CONFLICT,\n                `User with username \"${newUser.username}\" already exist`\n            );\n\n        const saltRound =\n            config.env === \"development\" || config.env === \"test\"\n                ? 1\n                : PASSWORD_SALT_ROUND;\n        user.password = await bcrypt.hash(user.password, saltRound);\n\n        newUser = User.createInstance({ ...user });\n\n        await this._userRepository.insertOrUpdate(newUser);\n\n        return newUser;\n    }\n\n    async get(query: { id?: string; emailOrUsername?: string }): Promise<User> {\n        if (!query.id && !query.emailOrUsername)\n            return Promise.reject(\n                Error(\"One or more arguments must be passed\")\n            );\n\n        let user: User;\n        if (query.id && query.emailOrUsername) {\n            user = await this._userRepository.findOneByQuery({\n                _id: query.id,\n                $or: [\n                    { email: query.emailOrUsername },\n                    { username: query.emailOrUsername }\n                ]\n            });\n        } else if (query.id) {\n            user = await this._userRepository.findById(query.id);\n        } else {\n            user = await this._userRepository.findOneByQuery({\n                $or: [\n                    { email: query.emailOrUsername },\n                    { username: query.emailOrUsername }\n                ]\n            });\n        }\n        return user;\n    }\n\n    async getAll(): Promise<User[]> {\n        return this._userRepository.findAll();\n    }\n    async pagedGetAll({\n        searchStr,\n        skip,\n        limit\n    }: {\n        searchStr?: string;\n        skip: number;\n        limit: number;\n    }): Promise<{ totalCount: number; items: User[] }> {\n        return this._userRepository.pagedFindAll({\n            searchStr,\n            limit,\n            skip\n        });\n    }\n\n    async update(user: Partial<User>): Promise<void> {\n        const userToUpdate = await this._userRepository.findById(user.id);\n        if (!userToUpdate)\n            throw new HttpError(\n                httpStatus.NOT_FOUND,\n                `User with ID \"${user.id}\" does not exist`\n            );\n\n        userToUpdate.update(user);\n        await this._userRepository.insertOrUpdate(userToUpdate);\n    }\n\n    async delete(id: string): Promise<boolean> {\n        return this._userRepository.deleteById(id);\n    }\n}\n"]}