{"version":3,"file":"tenant_service.js","sourceRoot":"","sources":["../../../../src/ui/services/tenant_service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,0EAA2C;AAC3C,yDAAiD;AAEjD,4DAAyD;AACzD,yDAA2E;AAE3E,qDAAiD;AACjD,8FAA0F;AAC1F,oCAAqC;AAGrC,IAAa,aAAa,qBAA1B,MAAa,aAAa;IAGhB,MAAM,CAAC,IAAY,EAAE,WAAmB;;YAC1C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CACtD,eAAM,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAC3C,CAAC;YACF,OAAO,gCAAY,CAAC,sBAAS,EAAE,MAAM,EAAE;gBACnC,wBAAwB,EAAE,IAAI;gBAC9B,uBAAuB,EAAE,IAAI;aAChC,CAAC,CAAC;QACP,CAAC;KAAA;IACK,MAAM,CAAC,MAAuB;;YAChC,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACxE,IAAI,CAAC,cAAc;gBACf,MAAM,IAAI,iBAAS,CACf,2BAAU,CAAC,SAAS,EACpB,mBAAmB,MAAM,CAAC,EAAE,kBAAkB,CACjD,CAAC;YAEN,uEAAuE;YAEvE,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC9B,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAChE,CAAC;KAAA;IACK,WAAW,CAAC,EACd,SAAS,EACT,IAAI,EACJ,KAAK,EAKR;;YACG,OAAO,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC;gBACvC,SAAS;gBACT,IAAI;gBACJ,KAAK;aACR,CAAC,CAAC;QACP,CAAC;KAAA;IACK,MAAM;;YACR,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;YACvD,OAAO,gCAAY,CAAoB,sBAAS,EAAE,OAAO,EAAE;gBACvD,wBAAwB,EAAE,IAAI;gBAC9B,uBAAuB,EAAE,IAAI;aAChC,CAAC,CAAC;QACP,CAAC;KAAA;IACK,GAAG,CAAC,IAAY;;YAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;YACrE,MAAM,SAAS,GACX,MAAM;gBACN,gCAAY,CAAC,sBAAS,EAAE,MAAM,EAAE;oBAC5B,wBAAwB,EAAE,IAAI;oBAC9B,uBAAuB,EAAE,IAAI;iBAChC,CAAC,CAAC;YACP,OAAO,SAAS,CAAC;QACrB,CAAC;KAAA;IACK,MAAM,CAAC,EAAU;;YACnB,OAAO,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QACjD,CAAC;KAAA;IACK,MAAM;;YACR,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC;YAEvD,MAAM,SAAS,GAAG,gCAAY,CAAC,sBAAS,EAAE,OAAO,EAAE;gBAC/C,wBAAwB,EAAE,IAAI;gBAC9B,uBAAuB,EAAE,IAAI;aAChC,CAAC,CAAC;YACH,OAAO,SAAS,CAAC;QACrB,CAAC;KAAA;CACJ,CAAA;AApE6B;IAAzB,YAAM,CAAC,oCAAgB,CAAC;;wDAA6C;AAD7D,aAAa;IADzB,sBAAgB,CAAC,eAAa,CAAC;GACnB,aAAa,CAqEzB;AArEY,sCAAa","sourcesContent":["import httpStatus from \"http-status-codes\";\nimport { plainToClass } from \"class-transformer\";\nimport { ITenantRepository } from \"../../core/domain/data/repositories\";\nimport { Tenant } from \"../../core/domain/models/tenant\";\nimport { provideSingleton, inject } from \"../../infrastructure/config/ioc\";\nimport { ITenantService } from \"../../core/domain/services/tenant_service\";\nimport { TenantDto } from \"../models/tenant_dto\";\nimport { TenantRepository } from \"../../infrastructure/db/repositories/tenant_repository\";\nimport { HttpError } from \"../error\";\n\n@provideSingleton(TenantService)\nexport class TenantService implements ITenantService {\n    @inject(TenantRepository) public _tenantRepository: ITenantRepository;\n\n    async create(name: string, description: string): Promise<TenantDto> {\n        const tenant = await this._tenantRepository.insertOrUpdate(\n            Tenant.createInstance(name, description)\n        );\n        return plainToClass(TenantDto, tenant, {\n            enableImplicitConversion: true,\n            excludeExtraneousValues: true\n        });\n    }\n    async update(tenant: Partial<Tenant>): Promise<void> {\n        const tenantToUpdate = await this._tenantRepository.findById(tenant.id);\n        if (!tenantToUpdate)\n            throw new HttpError(\n                httpStatus.NOT_FOUND,\n                `Tenant with ID \"${tenant.id}\" does not exist`\n            );\n\n        // check that tenantToUpdate does not overwrite an existing tenant name\n\n        tenantToUpdate.update(tenant);\n        await this._tenantRepository.insertOrUpdate(tenantToUpdate);\n    }\n    async pagedGetAll({\n        searchStr,\n        skip,\n        limit\n    }: {\n        searchStr?: string;\n        skip: number;\n        limit: number;\n    }): Promise<{ totalCount: number; items: Tenant[] }> {\n        return this._tenantRepository.pagedFindAll({\n            searchStr,\n            skip,\n            limit\n        });\n    }\n    async getAll(): Promise<TenantDto[]> {\n        const tenants = await this._tenantRepository.findAll();\n        return plainToClass<TenantDto, Tenant>(TenantDto, tenants, {\n            enableImplicitConversion: true,\n            excludeExtraneousValues: true\n        });\n    }\n    async get(name: string): Promise<TenantDto | undefined> {\n        const tenant = await this._tenantRepository.findOneByQuery({ name });\n        const tenantDto =\n            tenant &&\n            plainToClass(TenantDto, tenant, {\n                enableImplicitConversion: true,\n                excludeExtraneousValues: true\n            });\n        return tenantDto;\n    }\n    async delete(id: string): Promise<boolean> {\n        return this._tenantRepository.deleteById(id);\n    }\n    async search(): Promise<TenantDto[]> {\n        const tenants = await this._tenantRepository.findAll();\n\n        const tenantDto = plainToClass(TenantDto, tenants, {\n            enableImplicitConversion: true,\n            excludeExtraneousValues: true\n        });\n        return tenantDto;\n    }\n}\n"]}