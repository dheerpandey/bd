{"version":3,"file":"user.js","sourceRoot":"","sources":["../../../../src/ui/subscribers/user.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,mDAAqD;AAIrD,wDAAqD;AACrD,yDAA+D;AAC/D,iEAAiE;AACjE,iFAA6E;AAC7E,6EAAyE;AAEzE,qCAAkC;AAGlC,IAAa,cAAc,GAA3B,MAAa,cAAc;IAA3B;QACqB,YAAO,GAAG,kBAAY,CAAC,GAAG,CAAiB,8BAAa,CAAC,CAAC;QAC1D,iBAAY,GAAG,kBAAY,CAAC,GAAG,CAAe,0BAAW,CAAC,CAAC;IA4ChF,CAAC;IA3CG;;;;;;;;;OASG;IAEI,YAAY,CAAC,EAAE,EAAE,EAAoB;QACxC,IAAI;YACA,MAAM,SAAS,GAAG,kBAAY,CAAC,GAAG,CAAC,WAAW,CAE7C,CAAC;YAEF,SAAS,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;SACjE;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,qBAAqB,eAAM,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;YAEnE,yDAAyD;YACzD,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;SACtB;IACL,CAAC;IAEM,YAAY,CAAC,EAAE,SAAS,EAAE,KAAK,EAAQ;QAC1C,IAAI;YACA,wCAAwC;YACxC,IAAI,CAAC,YAAY,CAAC,kBAAkB,CAChC,sBAAW,CAAC,iBAAiB,EAC7B;gBACI,SAAS;gBACT,KAAK;aACR,CACJ,CAAC;SACL;QAAC,OAAO,CAAC,EAAE;YACR,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,qBAAqB,eAAM,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;YAEnE,yDAAyD;YACzD,MAAM,CAAC,CAAC;SACX;IACL,CAAC;CACJ,CAAA;AAhCG;IADC,mBAAE,CAAC,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC;;;;kDActB;AAED;IADC,mBAAE,CAAC,eAAM,CAAC,IAAI,CAAC,MAAM,CAAC;;qCACmB,WAAI;;kDAgB7C;AA7CQ,cAAc;IAD1B,gCAAe,EAAE;GACL,cAAc,CA8C1B;AA9CY,wCAAc","sourcesContent":["import { EventSubscriber, On } from \"event-dispatch\";\nimport mongoose from \"mongoose\";\nimport { ILoggerService } from \"../../core/application/logger_service\";\nimport { IMailService } from \"../../core/application/mail_service\";\nimport { User } from \"../../core/domain/models/user\";\nimport { iocContainer } from \"../../infrastructure/config/ioc\";\nimport { MailJobType } from \"../../infrastructure/jobs/mail_job\";\nimport { LoggerService } from \"../../infrastructure/services/logger_service\";\nimport { MailService } from \"../../infrastructure/services/mail_service\";\nimport { UserDto } from \"../models/user_dto\";\nimport { events } from \"./events\";\n\n@EventSubscriber()\nexport class UserSubscriber {\n    private readonly _logger = iocContainer.get<ILoggerService>(LoggerService);\n    private readonly _mailService = iocContainer.get<IMailService>(MailService);\n    /**\n     * A great example of an event that you want to handle\n     * save the last time a user sign-in, your boss will be pleased.\n     *\n     * Although it works in this tiny toy API, please don't do this for a production product\n     * just spamming insert/update to mongo will kill it eventually\n     *\n     * Use another approach like emit events to a queue (rabbitmq/aws sqs),\n     * then save the latest in Redis/Memcache or something similar\n     */\n    @On(events.user.signIn)\n    public onUserSignIn({ id }: Partial<UserDto>) {\n        try {\n            const UserModel = iocContainer.get(\"UserModel\") as mongoose.Model<\n                User & mongoose.Document\n            >;\n\n            UserModel.update({ id }, { $set: { lastLogin: new Date() } });\n        } catch (e) {\n            this._logger.error(`❌  Error on event ${events.user.signIn}: `, e);\n\n            // Throw the error so the process dies (check src/app.ts)\n            throw new Error(e);\n        }\n    }\n    @On(events.user.signUp)\n    public onUserSignUp({ firstName, email }: User) {\n        try {\n            // Start your email sequence or whatever\n            this._mailService.startEmailSequence(\n                MailJobType.SEND_WELCOME_MAIL,\n                {\n                    firstName,\n                    email\n                }\n            );\n        } catch (e) {\n            this._logger.error(`❌  Error on event ${events.user.signUp}: `, e);\n\n            // Throw the error so the process dies (check src/app.ts)\n            throw e;\n        }\n    }\n}\n"]}