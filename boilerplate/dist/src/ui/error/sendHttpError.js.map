{"version":3,"file":"sendHttpError.js","sourceRoot":"","sources":["../../../../src/ui/error/sendHttpError.ts"],"names":[],"mappings":";;AAIA;;;;;GAKG;AACH,MAAM,YAAY,GAAa,CAAC,KAAgB,EAAU,EAAE;IACxD,IAAI,KAAK,EAAE;QACP,OAAO,CACH,mCAAmC;YACnC,cAAc,KAAK,CAAC,MAAM,MAAM;YAChC,YAAY,KAAK,CAAC,IAAI,MAAM;YAC5B,MAAM,KAAK,MAAM;YACjB,QAAQ,CACX,CAAC;KACL;IAED,OAAO,EAAE,CAAC;AACd,CAAC,CAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACH,SAAgB,mBAAmB,CAC/B,GAAY,EACZ,GAAQ,EACR,IAAkB;IAElB,GAAG,CAAC,aAAa,GAAG,CAAC,KAAgB,EAAQ,EAAE;QAC3C,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEzB;;;;WAIG;QACH,IACI,GAAG,CAAC,GAAG;YACP,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC;YACd,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACrC,CAAC,CACG,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC;gBAChB,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAY,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CACvD,EACH;YACE,GAAG,CAAC,IAAI,CAAC;gBACL,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,OAAO,EAAE,KAAK,CAAC,OAAO;aACzB,CAAC,CAAC;SACN;aAAM;YACH,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;SACjC;IACL,CAAC,CAAC;IAEF,IAAI,EAAE,CAAC;AACX,CAAC;AAjCD,kDAiCC","sourcesContent":["import { NextFunction, Request } from \"express\";\n\nimport { HttpError } from \".\";\n\n/**\n *\n * @param error Error\n * @returns {string} HTML response or empty string\n * @description generates HTML for response\n */\nconst generateHTML: Function = (error: HttpError): string => {\n    if (error) {\n        return (\n            \"<div style='text-align: center;'>\" +\n            `<p>Status: ${error.status}</p>` +\n            `<p>Name: ${error.name}</p>` +\n            `<p>${error}</p>` +\n            \"</div>\"\n        );\n    }\n\n    return \"\";\n};\n/**\n * @exports\n * @param {Request} req\n * @param {*} res\n * @param {NextFunction} next\n *\n * @swagger\n * components:\n *  schemas:\n *    Error:\n *      type: object\n *      required:\n *        - status\n *        - message\n *      properties:\n *        status:\n *          type: integer\n *          description: HTTP status code\n *          example: 200\n *        message:\n *          type: string\n *          description: Error description\n *          example: User created\n */\nexport function sendHttpErrorModule(\n    req: Request,\n    res: any,\n    next: NextFunction\n): void {\n    res.sendHttpError = (error: HttpError): void => {\n        res.status(error.status);\n\n        /**\n         * if this looks like an AJAX request\n         * if this request has a \"json\" content-type AND ALSO has its \"Accept\" header set\n         * if this request DOESN'T explicitly want HTML\n         */\n        if (\n            req.xhr ||\n            req.is(\"json\") ||\n            (req.is(\"json\") && req.get(\"Accept\")) ||\n            !(\n                req.get(\"Accept\") &&\n                (req.get(\"Accept\") as string).indexOf(\"html\") !== -1\n            )\n        ) {\n            res.json({\n                status: error.status,\n                name: error.name,\n                message: error.message\n            });\n        } else {\n            res.send(generateHTML(error));\n        }\n    };\n\n    next();\n}\n"]}