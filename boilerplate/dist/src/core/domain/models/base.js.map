{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../../src/core/domain/models/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { modelOptions, pre, prop, Ref } from \"@typegoose/typegoose\";\nimport { TimeStamps } from \"@typegoose/typegoose/lib/defaultClasses\";\nimport { Expose } from \"class-transformer\";\nimport { Query } from \"mongoose\";\nimport { iocContainer } from \"../../../infrastructure/config/ioc\";\nimport { DecodedJwt } from \"../../../ui/services/auth_service\";\nimport { winstonLoggerInstance } from \"../../../infrastructure/bootstrapping/loaders/logger\";\nimport { TYPES } from \"../constants/types\";\nimport { Writable } from \"../utils/writable\";\nimport { User } from \"./user\";\n\n/**\n * Base entity from which other entities inherit\n *\n * @export\n * @abstract\n * @class BaseEntity\n * @extends {Typegoose}\n */\n// eslint-disable-next-line\n@pre<BaseEntity>(\"findOneAndUpdate\", function(this: Query<BaseEntity>) {\n    try {\n        const entity = this.getUpdate();\n        if (iocContainer.isBound(TYPES.DecodedJwt)) {\n            const currentUser = iocContainer.get<DecodedJwt>(TYPES.DecodedJwt);\n            entity.updatedBy = currentUser.userId;\n            if (entity.isDeleted) {\n                entity.deletedBy = currentUser.userId;\n                entity.deletionTime = new Date();\n            }\n        }\n    } catch (error) {\n        winstonLoggerInstance.error(error);\n        throw new Error(error);\n    }\n})\n// eslint-disable-next-line\n@pre<any>(\"save\", function() {\n    try {\n        if (iocContainer.isBound(TYPES.DecodedJwt)) {\n            const currentUser = iocContainer.get<DecodedJwt>(TYPES.DecodedJwt);\n            (this as Writable<\n                BaseEntity\n            >).createdBy = currentUser.userId as any;\n            if (this.type === \"User\" && !this.tenant)\n                this.setTenant(currentUser.tenantId);\n        } else if (this.type === \"User\") {\n            (this as Writable<BaseEntity>).createdBy = this;\n        }\n    } catch (error) {\n        winstonLoggerInstance.error(error);\n        throw new Error(error);\n    }\n})\n@modelOptions({\n    schemaOptions: {\n        toJSON: {\n            virtuals: true,\n            transform: (doc, ret) => {\n                ret.id = ret._id;\n                delete ret._id;\n            }\n        }\n    }\n})\nexport abstract class BaseEntity extends TimeStamps {\n    abstract type: string;\n    abstract update(entity: Partial<BaseEntity>): void;\n\n    /**\n     * Gets the primary key\n     *\n     * @type {*}\n     * @memberof BaseEntity\n     */\n    @Expose()\n    id?: any;\n\n    /**\n     * Gets the date and time the entity was created\n     *\n     * @type {Date}\n     * @memberof BaseEntity\n     */\n    @Expose()\n    @prop({ required: true, default: new Date() })\n    readonly createdAt: Date = new Date();\n    /**\n     * Gets a reference to the user who added this entity\n     *\n     * @type {(Ref<User | null>)}\n     * @memberof BaseEntity\n     */\n    @Expose()\n    @prop({ default: null, ref: BaseEntity })\n    readonly createdBy: Ref<User | null> = null;\n    /**\n     * Gets the date and time the entity was last updated\n     *\n     * @type {Date}\n     * @memberof BaseEntity\n     */\n    @Expose()\n    @prop({ default: null, ref: BaseEntity })\n    readonly updatedBy: Ref<User | null> = null;\n    /**\n     * Gets the entity's active status\n     *\n     * @type {boolean}\n     * @memberof BaseEntity\n     */\n    @Expose()\n    @prop({ required: true, default: true })\n    readonly isActive: boolean = true;\n    /**\n     * Specifies whether the entity has been soft-deleted\n     *\n     * @type {boolean}\n     * @memberof BaseEntity\n     */\n    @Expose()\n    @prop({ required: true, default: false })\n    readonly isDeleted: boolean = false;\n    /**\n     * Gets a reference to the user who deleted this entity if the entity has been soft-deleted\n     *\n     * @type {(Ref<User | null>)}\n     * @memberof BaseEntity\n     */\n    @Expose()\n    @prop({ default: null, ref: BaseEntity })\n    readonly deletedBy: Ref<User | null> = null;\n    /**\n     * Gets time the entity was deleted if it has been deleted\n     *\n     * @type {Date}\n     * @memberof BaseEntity\n     */\n    @Expose()\n    @prop({ default: null })\n    readonly deletionTime?: Date;\n\n    /**\n     * Sets {isDeleted} to true\n     *\n     * @memberof BaseEntity\n     */\n    delete(): void {\n        (this as Writable<BaseEntity>).isDeleted = true;\n    }\n\n    /**\n     * Sets {isDeleted} to false\n     *\n     * @memberof BaseEntity\n     */\n    restore(): void {\n        (this as Writable<BaseEntity>).isDeleted = false;\n    }\n\n    /**\n     * Sets {isActive} to true\n     *\n     * @memberof BaseEntity\n     */\n    deactivate(): void {\n        (this as Writable<BaseEntity>).isActive = false;\n    }\n\n    /**\n     * Sets isActive to false\n     *\n     * @memberof BaseEntity\n     */\n    activate(): void {\n        (this as Writable<BaseEntity>).isActive = true;\n    }\n}\n"]}