{"version":3,"file":"tenant.js","sourceRoot":"","sources":["../../../../../src/core/domain/models/tenant.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,oDAA4E;AAC5E,yDAA2C;AAE3C,iCAAoC;AAEpC;;;;;;GAMG;AAEH,IAAa,MAAM,cAAnB,MAAa,MAAO,SAAQ,iBAAU;IA2BlC,YAAY,GAA2C;QACnD,KAAK,EAAE,CAAC;QA1BH,SAAI,GAAW,QAAQ,CAAC;QA2B7B,IAAI,CAAC,GAAG;YAAE,OAAO;QAEjB,MAAM,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,GAAG,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAcM,MAAM,CAAC,QAAQ;QAClB,OAAO,4BAAgB,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,OAAO,CAAC,IAAY;QACf,IAAyB,CAAC,IAAI,GAAG,IAAI,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,cAAc,CAAC,WAAmB;QAC7B,IAAyB,CAAC,WAAW,GAAG,WAAW,CAAC;IACzD,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,MAAqB;QACxB,IAAI,MAAM,CAAC,IAAI;YACX,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI;iBACnB,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;iBAClB,WAAW,EAAY,CAAC,CAAC;QAClC,IAAI,MAAM,CAAC,WAAW;YAClB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAqB,CAAC,CAAC;IAC1D,CAAC;CACJ,CAAA;AA5CG;;;;;GAKG;AACI,qBAAc,GAAG,CAAC,IAAY,EAAE,WAAmB,EAAE,EAAE,CAC1D,IAAI,QAAM,CAAC;IACP,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE;IAC3C,WAAW;CACd,CAAC,CAAC;AA5CP;IADC,gBAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC;;oCACX;AAcjC;IAPC,gBAAI,CAAC;QACF,QAAQ,EAAE,IAAI;QACd,SAAS,EAAE,IAAI;QACf,KAAK,EAAE,IAAI;QACX,MAAM,EAAE,IAAI;KACf,CAAC;IACD,0BAAM,EAAE;;oCACc;AASvB;IAFC,gBAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACxB,0BAAM,EAAE;;2CACqB;AAzBrB,MAAM;IADlB,wBAAY,CAAC,EAAE,OAAO,EAAE,EAAE,UAAU,EAAE,SAAS,EAAE,EAAE,CAAC;;GACxC,MAAM,CAgFlB;AAhFY,wBAAM","sourcesContent":["import { getModelForClass, prop, modelOptions } from \"@typegoose/typegoose\";\nimport { Expose } from \"class-transformer\";\nimport { Writable } from \"../utils/writable\";\nimport { BaseEntity } from \"./base\";\n\n/**\n *\n *\n * @export\n * @class Tenant\n * @extends {BaseEntity}\n */\n@modelOptions({ options: { customName: \"tenants\" } })\nexport class Tenant extends BaseEntity {\n    @prop({ required: true, default: \"Tenant\" })\n    readonly type: string = \"Tenant\";\n    /**\n     * Gets the name of the tenant\n     *\n     * @type {string}\n     * @memberof Tenant\n     */\n    @prop({\n        required: true,\n        uppercase: true,\n        index: true,\n        unique: true\n    })\n    @Expose()\n    readonly name!: string;\n    /**\n     * Gets the description of the tenant\n     *\n     * @type {string}\n     * @memberof Tenant\n     */\n    @prop({ required: true })\n    @Expose()\n    readonly description!: string;\n\n    constructor(arg?: { name: string; description: string }) {\n        super();\n        if (!arg) return;\n\n        const { name, description } = arg;\n        this.name = name;\n        this.description = description;\n    }\n\n    /**\n     * Creates and returns a new instance of Tenant\n     *\n     * @static\n     * @memberof Tenant\n     */\n    static createInstance = (name: string, description: string) =>\n        new Tenant({\n            name: name.replace(/\\s/g, \"\").toUpperCase(),\n            description\n        });\n\n    public static getModel() {\n        return getModelForClass(this);\n    }\n\n    setName(name: string) {\n        (this as Writable<Tenant>).name = name;\n    }\n\n    /**\n     * Sets the description of the tenant\n     *\n     * @param {string} description\n     * @memberof Tenant\n     */\n    setDescription(description: string) {\n        (this as Writable<Tenant>).description = description;\n    }\n\n    /**\n     * Sets an update on the tenant's name and/or description\n     *\n     * @param {Partial<this>} tenant\n     * @memberof Tenant\n     */\n    update(tenant: Partial<this>): void {\n        if (tenant.name)\n            this.setName(tenant.name\n                .replace(/\\s/g, \"\")\n                .toUpperCase() as string);\n        if (tenant.description)\n            this.setDescription(tenant.description as string);\n    }\n}\n"]}