{"version":3,"file":"user.js","sourceRoot":"","sources":["../../../../../src/core/domain/models/user.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    getModelForClass,\n    index,\n    prop,\n    Ref,\n    modelOptions\n} from \"@typegoose/typegoose\";\nimport { iocContainer } from \"../../../infrastructure/config/ioc\";\nimport { config } from \"../../../infrastructure/config\";\nimport { TYPES } from \"../constants/types\";\nimport { Writable } from \"../utils/writable\";\nimport { BaseEntity } from \"./base\";\nimport { IMustHaveTenant } from \"./interfaces/must_have_tenant\";\nimport { Tenant } from \"./tenant\";\nimport { inc, set } from \"../data/db_operators\";\n\nexport const MAX_NAME_LENGTH = 225;\nexport const PASSWORD_SALT_ROUND = 12;\n\n/**\n *\n *\n * @export\n * @enum {number}\n */\nexport enum UserRole {\n    USER = \"user\",\n    ADMIN = \"admin\"\n}\n\n/**\n *\n *\n * @export\n * @class User\n * @extends {BaseEntity}\n * @implements {IMustHaveTenant}\n */\n@modelOptions({ options: { customName: \"users\" } })\n@index({ email: 1, tenant: 1 }, { unique: true })\n@index({ username: 1, tenant: 1 }, { unique: true })\nexport class User extends BaseEntity implements IMustHaveTenant {\n    /**\n     *Gets the type of the user\n     *\n     * @type {string}\n     * @memberof User\n     */\n    @prop({ required: true, default: \"User\" })\n    readonly type: string = \"User\";\n    /**\n     * Gets the firstName of the user\n     *\n     * @type {string}\n     * @memberof User\n     */\n    @prop({ required: true, maxlength: MAX_NAME_LENGTH, trim: true })\n    readonly firstName!: string;\n    /**\n     * Get the lastName of the user\n     *\n     * @type {string}\n     * @memberof User\n     */\n    @prop({ required: true, maxlength: MAX_NAME_LENGTH, trim: true })\n    readonly lastName!: string;\n\n    @prop({ required: true, ref: Tenant, unique: false })\n    readonly tenant!: Ref<Tenant>;\n    /**\n     * Gets the username of the user\n     *\n     * @type {string}\n     * @memberof User\n     */\n    @prop({\n        required: true,\n        maxlength: MAX_NAME_LENGTH,\n        trim: true,\n        lowercase: true,\n        text: true,\n        unique: false\n    })\n    readonly username!: string;\n\n    /**\n     * Gets the email address of the user\n     *\n     * @type {string}\n     * @memberof User\n     */\n    @prop({\n        required: true,\n        maxlength: MAX_NAME_LENGTH,\n        trim: true,\n        lowercase: true,\n        text: true,\n        unique: false\n    })\n    readonly email!: string;\n\n    /**\n     * Gets'the password hash of the user\n     *\n     * @type {string}\n     * @memberof User\n     */\n    @prop({ required: true, maxlength: MAX_NAME_LENGTH })\n    readonly password!: string;\n\n    /**\n     * Gets the role assigned to the user\n     *\n     * @type {UserRole}\n     * @memberof User\n     */\n    @prop({\n        enum: UserRole,\n        required: true,\n        default: UserRole.USER\n    })\n    readonly role: UserRole = UserRole.USER;\n\n    /**\n     * Gets the current number of consecutive failed signin attempts of the user\n     *\n     * @type {number}\n     * @memberof User\n     */\n    @prop({ required: true, default: 0 })\n    readonly failedSignInAttempts: number;\n\n    /**\n     * Gets the date and time through which the user will be locked out if the user is currently locked out\n     *\n     * @type {Date}\n     * @memberof User\n     */\n    @prop({ default: undefined })\n    readonly lockOutEndDate?: Date;\n\n    /**\n     * Returns true if the user is currently locked out\n     *\n     * @readonly\n     * @type {boolean}\n     * @memberof User\n     */\n    get isLockedOut(): boolean {\n        return (\n            this.failedSignInAttempts >= config.userLockout.maxSignInAttempts &&\n            this.lockOutEndDate !== undefined &&\n            this.lockOutEndDate > new Date()\n        );\n    }\n\n    public constructor(arg?: {\n        firstName: string;\n        lastName: string;\n        email: string;\n        username: string;\n        password: string;\n        tenant: Ref<Tenant>;\n    }) {\n        super();\n        if (!arg) return;\n        const { firstName, lastName, email, username, password, tenant } = arg;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.email = email;\n        this.username = username;\n        this.password = password;\n        this.tenant = tenant;\n    }\n\n    /**\n     * Creates and returns a new instance of User\n     *\n     * @static\n     * @memberof User\n     */\n    static createInstance = ({\n        firstName,\n        lastName,\n        email,\n        username,\n        password,\n        tenantId\n    }: {\n        firstName: string;\n        lastName: string;\n        email: string;\n        username: string;\n        password: string;\n        tenantId?: string;\n    }) => {\n        const id = tenantId || iocContainer.get<any>(TYPES.TenantId);\n        if (!id) throw new Error(\"Tenant Id is required\");\n        return new User({\n            firstName,\n            lastName,\n            email,\n            username,\n            password,\n            tenant: id\n        });\n    };\n    public static getModel() {\n        return getModelForClass(this);\n    }\n\n    /**\n     * returns an update to be sent to the database for a particular user when a signin is attepted on that user\n     *\n     * @static\n     * @returns {{ [key: string]: object }}\n     * @memberof User\n     */\n    static getSignInAttemptUpdate(): { [key: string]: object } {\n        const endDate = new Date();\n        endDate.setMinutes(\n            endDate.getMinutes() + config.userLockout.lockoutTime\n        );\n        return {\n            ...inc({ failedSignInAttempts: 1 }),\n            ...set({ lockOutEndDate: endDate })\n        };\n    }\n\n    /**\n     * Sets the role of the user\n     *\n     * @param {UserRole} role\n     * @memberof User\n     */\n    setRole(role: UserRole) {\n        (this as Writable<User>).role = role;\n    }\n\n    /**\n     * Sets the email address of the user\n     *\n     * @param {string} email\n     * @memberof User\n     */\n    setEmail(email: string) {\n        (this as Writable<User>).email = email;\n    }\n\n    /**\n     * Sets the username of the user\n     *\n     * @param {string} username\n     * @memberof User\n     */\n    setUsername(username: string) {\n        (this as Writable<User>).username = username;\n    }\n\n    /**\n     * Sets the firstName of the user\n     *\n     * @param {string} firstName\n     * @memberof User\n     */\n    setFirstName(firstName: string) {\n        (this as Writable<User>).firstName = firstName;\n    }\n\n    /**\n     * Sets the lastName of the user\n     *\n     * @param {string} lastName\n     * @memberof User\n     */\n    setLastName(lastName: string) {\n        (this as Writable<User>).lastName = lastName;\n    }\n\n    /**\n     * Sets the password hash of the user\n     *\n     * @param {string} password\n     * @memberof User\n     */\n    setPassword(password: string) {\n        (this as Writable<User>).password = password;\n    }\n\n    /**\n     * Sets the reference to the tenant to which the user belongs\n     *\n     * @param {*} tenant\n     * @memberof User\n     */\n    setTenant(tenant: any) {\n        (this as Writable<this>).tenant = tenant;\n    }\n    /**\n     * Updates the properties of the user which can be updated\n     *\n     * @param {Partial<this>} user\n     * @memberof User\n     */\n    update(user: Partial<this>): void {\n        if (user.firstName) this.setFirstName(user.firstName as string);\n        if (user.lastName) this.setLastName(user.lastName as string);\n        if (user.password) this.setPassword(user.password as string);\n        if (user.username) this.setUsername(user.username as string);\n        if (user.email) this.setEmail(user.email as string);\n        if (user.role) this.setRole(user.role as UserRole);\n    }\n\n    /**\n     * Clears the failedSigninAttempts and lockOutEndDate of the user to their defaults\n     *\n     * @memberof User\n     */\n    clearLockOut() {\n        (this as Writable<User>).lockOutEndDate = undefined;\n        (this as Writable<User>).failedSignInAttempts = 0;\n    }\n}\n"]}