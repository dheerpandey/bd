{"version":3,"file":"repositories.js","sourceRoot":"","sources":["../../../../../src/core/domain/data/repositories.ts"],"names":[],"mappings":"","sourcesContent":["import { Tenant } from \"../models/tenant\";\nimport { User } from \"../models/user\";\n\nexport type Query<T> = {\n    [P in keyof T]?: T[P] | { $regex: RegExp };\n};\n\nexport interface IBaseRepository<T> {\n    /**\n     * Inserts the document into the database if it has no id or updates a record\n     *  with the same id in the database\n     * @param {T} doc the document to insert or update\n     * @returns {Promise<T>}\n     * @memberof IBaseRepository\n     */\n    insertOrUpdate(doc: T): Promise<T>;\n    /**\n     * Returns all documents in the collection\n     *\n     * @returns {Promise<T[]>}\n     * @memberof IBaseRepository\n     */\n    findAll(): Promise<T[]>;\n    /**\n     * Returns a document in the collection with the given id\n     *\n     * @param {string} id\n     * @returns {Promise<T>}\n     * @memberof IBaseRepository\n     */\n    findById(id: string): Promise<T>;\n    /**\n     * Returns a document with the given id in the collection even if the document has been deleted\n     *\n     * @param {string} id\n     * @returns {Promise<T>}\n     * @memberof IBaseRepository\n     */\n    hardFindById(id: string): Promise<T>;\n    findManyById(ids: string[]): Promise<T[]>;\n\n    /**\n     * Finds the first document that matches the supplied query in the collection\n     *\n     * @param {Query<T>} query\n     * @returns {Promise<T>}\n     * @memberof IBaseRepository\n     */\n    findOneByQuery(query: Query<T>): Promise<T>;\n    /**\n     * Finds the first document that matches the supplied query in the collection\n     *\n     * @param {Query<T>} query\n     * @returns {Promise<T>}\n     * @memberof IBaseRepository\n     */\n    findOneByQuery(query: Query<{ [key: string]: any }>): Promise<T>;\n    /**\n     * Finds all documents that matches the supplied query in the collection\n     *\n     * @param {Query<{ [key: string]: any }>} query\n     * @returns {Promise<T[]>}\n     * @memberof IBaseRepository\n     */\n    findManyByQuery(query?: Query<{ [key: string]: any }>): Promise<T[]>;\n    /**\n     * Finds all documents that matches the supplied query in the collection\n     *\n     * @param {Query<{ [key: string]: any }>} query\n     * @returns {Promise<T[]>}\n     * @memberof IBaseRepository\n     */\n    findManyByQuery(query?: Query<T>): Promise<T[]>;\n\n    /**\n     * Inserts multiple entities at once.\n     *\n     * @param {T[]} entities\n     * @returns {Promise<void>}\n     * @memberof IBaseRepository\n     */\n    insertMany(entities: T[]): Promise<void>;\n    /**\n     * Returns a paginated list of documents that satisfy the paged query.\n     *\n     * @param {{\n     *         searchStr?: string;\n     *         skip?: number;\n     *         limit?: number;\n     *     }} {\n     *         searchStr,\n     *         skip, [default 0]\n     *         limit [default 50]\n     *     }\n     * @returns {Promise<{\n     *         totalCount: number;\n     *         items: T[];\n     *     }>}\n     * @memberof IBaseRepository\n     */\n    pagedFindAll({\n        searchStr,\n        skip,\n        limit\n    }: {\n        searchStr?: string;\n        skip: number;\n        limit: number;\n    }): Promise<{\n        totalCount: number;\n        items: T[];\n    }>;\n    /**\n     * Soft-deletes an element with the given id in the database\n     *\n     * @param {string} id\n     * @returns {Promise<boolean>}\n     * @memberof IBaseRepository\n     */\n    deleteById(id: string): Promise<boolean>;\n    // deleteOneByQuery(query: Query<T>): Promise<number>;\n    // deleteManyByQuery(query?: Query<T>): Promise<number>;\n}\n\nexport interface IUserRepository extends IBaseRepository<User> {\n    /**\n     * Finds an element in the collection that matches the given query and updates the record\n     * with the supplied update\n     *\n     * @param {Query<{ [key: string]: object }>} query\n     * @param {{ [key: string]: object }} update\n     * @returns {Promise<User>}\n     * @memberof IUserRepository\n     */\n    findOneByQueryAndUpdate(\n        query: Query<{ [key: string]: object }>,\n        update: { [key: string]: object }\n    ): Promise<User>;\n}\nexport type ITenantRepository = IBaseRepository<Tenant>;\n"]}